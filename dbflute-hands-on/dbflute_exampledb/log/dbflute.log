2013-08-27 15:36:47,220 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2013-08-27 15:36:47,223 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2013-08-27 15:36:47,224 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2013-08-27 15:36:47,245 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2013-08-27 15:36:47,246 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2013-08-27 15:36:47,248 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2013-08-27 15:36:49,205 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 15:36:49,206 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 15:36:49,206 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 15:36:49,207 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 15:36:49,221 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-27 15:36:49,428 [main] INFO  (DfReplaceSchemaTask#setupLazyConnection():139) - ...Being a lazy connection: Failed to connect: url=jdbc:mysql://localhost:4...
2013-08-27 15:36:49,453 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2013-08-27 15:36:49,454 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2013-08-27 15:36:49,454 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2013-08-27 15:36:49,455 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2013-08-27 15:36:49,455 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2013-08-27 15:36:49,456 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2013-08-27 15:36:49,457 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():214) - *Passed because it's a lazy connection
2013-08-27 15:36:49,460 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2013-08-27 15:36:49,461 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2013-08-27 15:36:49,461 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2013-08-27 15:36:49,462 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2013-08-27 15:36:49,462 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2013-08-27 15:36:49,462 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2013-08-27 15:36:49,469 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-00-system.sql
2013-08-27 15:36:49,473 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database exampledb
2013-08-27 15:36:49,475 [main] INFO  (DfCreateSchemaProcess$1#dispatch():273) - ...Creating a connection to system
2013-08-27 15:36:49,477 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():509) - ...Creating a connection for additional user
2013-08-27 15:36:49,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on exampledb.*
  to exampuser@localhost identified by 'exampword'
2013-08-27 15:36:49,551 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2013-08-27 15:36:49,553 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=3 failure=0
2013-08-27 15:36:49,554 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2013-08-27 15:36:49,554 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():359) - ...Coming back to the main user from the user 'system'
2013-08-27 15:36:49,562 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2013-08-27 15:36:49,581 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#lazyConnectIfNeeds():444) - ...Connecting by main user lazily
2013-08-27 15:36:49,582 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 15:36:49,583 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 15:36:49,583 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 15:36:49,584 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 15:36:49,585 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-27 15:36:49,605 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():229) -   product = MySQL 5.6.13
2013-08-27 15:36:49,606 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():230) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-08-27 15:36:49,651 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2013-08-27 15:36:49,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2013-08-27 15:36:49,731 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2013-08-27 15:36:49,756 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2013-08-27 15:36:49,778 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2013-08-27 15:36:49,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2013-08-27 15:36:49,828 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(200) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2013-08-27 15:36:49,867 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2013-08-27 15:36:49,891 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2013-08-27 15:36:49,912 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2013-08-27 15:36:49,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2013-08-27 15:36:49,948 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2013-08-27 15:36:49,969 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2013-08-27 15:36:49,986 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER ADD CONSTRAINT FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-27 15:36:50,053 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES REGION (REGION_ID)
2013-08-27 15:36:50,485 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-27 15:36:50,521 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,549 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) REFERENCES SERVICE_RANK (SERVICE_RANK_CODE)
2013-08-27 15:36:50,632 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SECURITY ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,700 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) REFERENCES WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2013-08-27 15:36:50,728 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 15:36:50,797 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
2013-08-27 15:36:50,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-27 15:36:50,893 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) REFERENCES PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2013-08-27 15:36:50,951 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-27 15:36:51,003 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_MEMBER_NAME ON MEMBER(MEMBER_NAME)
2013-08-27 15:36:51,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_FORMALIZED_DATETIME ON MEMBER(FORMALIZED_DATETIME)
2013-08-27 15:36:51,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_LOGIN_DATETIME ON MEMBER_LOGIN(LOGIN_DATETIME)
2013-08-27 15:36:51,060 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_SERVICE_POINT_COUNT ON MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2013-08-27 15:36:51,074 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRODUCT_DATETIME ON PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2013-08-27 15:36:51,095 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_DATETIME_MEMBER ON PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2013-08-27 15:36:51,192 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRICE ON PURCHASE(PURCHASE_PRICE)
2013-08-27 15:36:51,215 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PRODUCT_PRODUCT_NAME ON PRODUCT(PRODUCT_NAME)
2013-08-27 15:36:51,269 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=37 failure=0
2013-08-27 15:36:51,270 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=40 failure=0 (in 2 files)
2013-08-27 15:36:51,271 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():542) - ...Closing connections to change-users: [system]
2013-08-27 15:36:51,304 [main] INFO  (DfLoadDataProcess#execute():129) - 
2013-08-27 15:36:51,305 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2013-08-27 15:36:51,305 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2013-08-27 15:36:51,306 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2013-08-27 15:36:51,307 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2013-08-27 15:36:51,308 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2013-08-27 15:36:51,337 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2013-08-27 15:36:51,338 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2013-08-27 15:36:51,338 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2013-08-27 15:36:51,339 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2013-08-27 15:36:51,340 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2013-08-27 15:36:51,341 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2013-08-27 15:36:51,349 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2013-08-27 15:36:51,351 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2013-08-27 15:36:51,351 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=0 failure=0 (in 1 files)
2013-08-27 15:36:51,353 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-08-27 15:36:51,357 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s134ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Create Schema}: success=40 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=0
  - (no data file)

 {Take Finally}: success=0 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2013-08-27 15:43:20,870 [main] INFO  (TorqueJDBCTransformTask#begin():100) - +------------------------------------------+
2013-08-27 15:43:20,873 [main] INFO  (TorqueJDBCTransformTask#begin():101) - |                                          |
2013-08-27 15:43:20,874 [main] INFO  (TorqueJDBCTransformTask#begin():102) - |                   JDBC                   |
2013-08-27 15:43:20,874 [main] INFO  (TorqueJDBCTransformTask#begin():103) - |                                          |
2013-08-27 15:43:20,875 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2013-08-27 15:43:20,934 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 15:43:20,935 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 15:43:20,936 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 15:43:20,936 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 15:43:20,990 [main] INFO  (DfSchemaXmlSerializer#serialize():267) - 
2013-08-27 15:43:20,991 [main] INFO  (DfSchemaXmlSerializer#serialize():268) - ...Starting to process JDBC to SchemaXML
2013-08-27 15:43:20,991 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1362) - ...Loading previous schema (schema diff process)
2013-08-27 15:43:20,992 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1365) -  -> no previous (first time)
2013-08-27 15:43:21,005 [main] INFO  (DfSchemaXmlSerializer#generateXML():340) - ...Getting DB connection
2013-08-27 15:43:21,012 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-27 15:43:21,253 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():229) -   product = MySQL 5.6.13
2013-08-27 15:43:21,254 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():230) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-08-27 15:43:21,257 [main] INFO  (DfSchemaXmlSerializer#generateXML():343) - ...Getting DB meta data
2013-08-27 15:43:21,262 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-08-27 15:43:21,263 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-08-27 15:43:21,263 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-08-27 15:43:21,279 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'exampledb' order by table_name asc
2013-08-27 15:43:21,284 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'exampledb' order by table_name asc, column_name asc
2013-08-27 15:43:21,308 [main] INFO  (DfSchemaXmlSerializer#processTable():395) - 
2013-08-27 15:43:21,309 [main] INFO  (DfSchemaXmlSerializer#processTable():396) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2013-08-27 15:43:21,309 [main] INFO  (DfSchemaXmlSerializer#processTable():397) - $ [Table List]
2013-08-27 15:43:21,310 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2013-08-27 15:43:21,355 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2013-08-27 15:43:21,373 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2013-08-27 15:43:21,388 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2013-08-27 15:43:21,404 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2013-08-27 15:43:21,421 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_status(TABLE) // 会員ステータス
2013-08-27 15:43:21,437 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2013-08-27 15:43:21,451 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.product(TABLE) // 商品
2013-08-27 15:43:21,469 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2013-08-27 15:43:21,485 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.product_status(TABLE) // 商品ステータス
2013-08-27 15:43:21,496 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2013-08-27 15:43:21,522 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2013-08-27 15:43:21,533 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2013-08-27 15:43:21,547 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():419) - $ exampledb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2013-08-27 15:43:21,559 [main] INFO  (DfSchemaXmlSerializer#processTable():405) - $ 
2013-08-27 15:43:21,560 [main] INFO  (DfSchemaXmlSerializer#processTable():406) - $ [Table Count]
2013-08-27 15:43:21,561 [main] INFO  (DfSchemaXmlSerializer#processTable():407) - $ 14
2013-08-27 15:43:21,562 [main] INFO  (DfSchemaXmlSerializer#processTable():408) - $ = = = = = = = = = =/
2013-08-27 15:43:21,562 [main] INFO  (DfSchemaXmlSerializer#processTable():409) - 
2013-08-27 15:43:21,564 [main] INFO  (DfSchemaXmlSerializer#processSequence():708) - ...Getting sequences
2013-08-27 15:43:21,575 [main] INFO  (DfSchemaXmlSerializer#serialize():282) - ...Serializing XML:
2013-08-27 15:43:21,575 [main] INFO  (DfSchemaXmlSerializer#serialize():283) -   filePath = ./schema/project-schema-exampledb.xml
2013-08-27 15:43:21,576 [main] INFO  (DfSchemaXmlSerializer#serialize():284) -   encoding = UTF-8
2013-08-27 15:43:21,609 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-08-27 15:43:21,616 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s743ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2013-08-27 15:43:47,437 [main] INFO  (TorqueDocumentationTask#begin():172) - +------------------------------------------+
2013-08-27 15:43:47,441 [main] INFO  (TorqueDocumentationTask#begin():173) - |                                          |
2013-08-27 15:43:47,442 [main] INFO  (TorqueDocumentationTask#begin():174) - |                   Doc                    |
2013-08-27 15:43:47,443 [main] INFO  (TorqueDocumentationTask#begin():182) - |                                          |
2013-08-27 15:43:47,443 [main] INFO  (TorqueDocumentationTask#begin():183) - +------------------------------------------+
2013-08-27 15:43:47,492 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 15:43:47,493 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 15:43:47,494 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 15:43:47,495 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 15:43:47,499 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():240) - 
2013-08-27 15:43:47,500 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():241) - * * * * * * * * * * *
2013-08-27 15:43:47,500 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():242) - *                   *
2013-08-27 15:43:47,501 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():243) - *    Schema HTML    *
2013-08-27 15:43:47,501 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():244) - *                   *
2013-08-27 15:43:47,502 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():245) - * * * * * * * * * * *
2013-08-27 15:43:47,631 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-08-27 15:43:47,730 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("doc/ControlDocument.vm", c);
2013-08-27 15:43:47,795 [main] INFO  (Database#doEnableDocumentOutputDirectory():1166) - ...Setting up documentOutputDirectory: ./output/doc
2013-08-27 15:43:47,802 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2013-08-27 15:43:47,803 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2013-08-27 15:43:47,805 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2013-08-27 15:43:47,808 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2013-08-27 15:43:47,808 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2013-08-27 15:43:47,811 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2013-08-27 15:43:47,817 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2013-08-27 15:43:47,818 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2013-08-27 15:43:47,821 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2013-08-27 15:43:48,188 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():150) - ...Loading schema history
2013-08-27 15:43:48,188 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():156) -  -> no history
2013-08-27 15:43:48,201 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-08-27 15:43:48,273 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s831ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {Doc}
2013-08-27 15:47:53,954 [main] INFO  (TorqueDataModelTask#begin():104) - +------------------------------------------+
2013-08-27 15:47:53,958 [main] INFO  (TorqueDataModelTask#begin():105) - |                                          |
2013-08-27 15:47:53,959 [main] INFO  (TorqueDataModelTask#begin():106) - |                 Generate                 |
2013-08-27 15:47:53,959 [main] INFO  (TorqueDataModelTask#begin():107) - |                                          |
2013-08-27 15:47:53,960 [main] INFO  (TorqueDataModelTask#begin():108) - +------------------------------------------+
2013-08-27 15:47:54,010 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 15:47:54,011 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 15:47:54,011 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 15:47:54,012 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 15:47:54,021 [main] INFO  (TorqueDataModelTask#setupControlTemplate():153) - 
2013-08-27 15:47:54,021 [main] INFO  (TorqueDataModelTask#setupControlTemplate():154) - * * * * * * * * *
2013-08-27 15:47:54,022 [main] INFO  (TorqueDataModelTask#setupControlTemplate():155) - * Process Java  *
2013-08-27 15:47:54,022 [main] INFO  (TorqueDataModelTask#setupControlTemplate():156) - * * * * * * * * *
2013-08-27 15:47:54,023 [main] INFO  (TorqueDataModelTask#setupControlTemplate():158) - ...Using Java control: om/ControlGenerateJava.vm
2013-08-27 15:47:54,149 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-08-27 15:47:54,237 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlGenerateJava.vm", c);
2013-08-27 15:47:54,417 [main] INFO  (Database#doEnableGenerateOutputDirectory():1134) - ...Setting up generateOutputDirectory: ../src/main/java
2013-08-27 15:47:54,421 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2013-08-27 15:47:54,422 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2013-08-27 15:47:54,424 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2013-08-27 15:47:54,426 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2013-08-27 15:47:54,427 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2013-08-27 15:47:54,429 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2013-08-27 15:47:54,433 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2013-08-27 15:47:54,434 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2013-08-27 15:47:54,436 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2013-08-27 15:47:54,450 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():57) - /=============================
2013-08-27 15:47:54,451 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - ...Initializing include query.
2013-08-27 15:47:54,452 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - String
2013-08-27 15:47:54,452 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - Number
2013-08-27 15:47:54,453 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - Date
2013-08-27 15:47:54,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   NotEqual -> []
2013-08-27 15:47:54,454 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   InScope -> []
2013-08-27 15:47:54,455 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   NotInScope -> []
2013-08-27 15:47:54,456 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():60) - ========/
2013-08-27 15:47:54,472 [main] INFO  (Database#info():2586) - public void parseAllCommon() {
2013-08-27 15:47:54,476 [main] INFO  (Database#info():2586) -     parse('DBCurrent');
2013-08-27 15:47:54,482 [main] INFO  (Database#info():2586) -     parse('DBFluteConfig');
2013-08-27 15:47:54,514 [main] INFO  (Database#info():2586) -     parse('DBFluteInitializer');
2013-08-27 15:47:54,520 [main] INFO  (Database#info():2586) -     parse('DBMetaInstanceHandler');
2013-08-27 15:47:54,542 [main] INFO  (Database#info():2586) -     parse('EntityDefinedCommonColumn');
2013-08-27 15:47:54,549 [main] INFO  (Database#info():2586) -     parse('ImplementedBehaviorSelector');
2013-08-27 15:47:54,561 [main] INFO  (Database#info():2586) -     parse('ImplementedCommonColumnAutoSetupper');
2013-08-27 15:47:54,572 [main] INFO  (Database#info():2586) -     parse('ImplementedInvokerAssistant');
2013-08-27 15:47:54,579 [main] INFO  (Database#info():2586) -     parse('ImplementedSqlClauseCreator');
2013-08-27 15:47:54,584 [main] INFO  (Database#info():2586) - }
2013-08-27 15:47:54,588 [main] INFO  (Database#info():2586) - public void parseContainerConfig() {
2013-08-27 15:47:54,591 [main] INFO  (Database#info():2586) -     parse('../resources/dbflute.dicon')
2013-08-27 15:47:54,606 [main] INFO  (Database#info():2586) - }
2013-08-27 15:47:54,620 [main] INFO  (DfOldClassHandler#info():872) - public void deleteOldTableClass() {
2013-08-27 15:47:54,660 [main] INFO  (DfOldClassHandler#info():872) - }
2013-08-27 15:47:54,661 [main] INFO  (Database#info():2586) - public void parseTableClass() {
2013-08-27 15:47:54,662 [main] INFO  (Database#info():2586) -     parse('member');
2013-08-27 15:47:55,144 [main] INFO  (Database#info():2586) -     parse('member_address');
2013-08-27 15:47:55,409 [main] INFO  (Database#info():2586) -     parse('member_login');
2013-08-27 15:47:55,603 [main] INFO  (Database#info():2586) -     parse('member_security');
2013-08-27 15:47:55,777 [main] INFO  (Database#info():2586) -     parse('member_service');
2013-08-27 15:47:55,954 [main] INFO  (Database#info():2586) -     parse('member_status');
2013-08-27 15:47:56,123 [main] INFO  (Database#info():2586) -     parse('member_withdrawal');
2013-08-27 15:47:56,278 [main] INFO  (Database#info():2586) -     parse('product');
2013-08-27 15:47:56,474 [main] INFO  (Database#info():2586) -     parse('product_category');
2013-08-27 15:47:56,602 [main] INFO  (Database#info():2586) -     parse('product_status');
2013-08-27 15:47:56,710 [main] INFO  (Database#info():2586) -     parse('purchase');
2013-08-27 15:47:56,883 [main] INFO  (Database#info():2586) -     parse('region');
2013-08-27 15:47:57,024 [main] INFO  (Database#info():2586) -     parse('service_rank');
2013-08-27 15:47:57,156 [main] INFO  (Database#info():2586) -     parse('withdrawal_reason');
2013-08-27 15:47:57,262 [main] INFO  (Database#info():2586) - }
2013-08-27 15:47:57,263 [main] INFO  (Database#info():2586) -  
2013-08-27 15:47:57,438 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-08-27 15:47:57,469 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s509ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {Generate}
2013-08-27 15:56:43,776 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-08-27 15:56:43,801 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s082ms
2013-08-27 17:46:29,630 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2013-08-27 17:46:29,634 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2013-08-27 17:46:29,635 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2013-08-27 17:46:29,661 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2013-08-27 17:46:29,662 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2013-08-27 17:46:29,665 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2013-08-27 17:46:31,533 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-27 17:46:31,534 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-27 17:46:31,534 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-27 17:46:31,535 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-27 17:46:31,543 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-27 17:46:31,794 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():229) -   product = MySQL 5.6.13
2013-08-27 17:46:31,795 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():230) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-08-27 17:46:31,823 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2013-08-27 17:46:31,824 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2013-08-27 17:46:31,825 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2013-08-27 17:46:31,826 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2013-08-27 17:46:31,827 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2013-08-27 17:46:31,827 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2013-08-27 17:46:31,845 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-08-27 17:46:31,846 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-08-27 17:46:31,847 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-08-27 17:46:31,900 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_address
2013-08-27 17:46:31,942 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_login
2013-08-27 17:46:31,974 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_security
2013-08-27 17:46:31,989 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_service
2013-08-27 17:46:32,004 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_withdrawal
2013-08-27 17:46:32,030 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table purchase
2013-08-27 17:46:32,043 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2013-08-27 17:46:32,051 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2013-08-27 17:46:32,058 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2013-08-27 17:46:32,068 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2013-08-27 17:46:32,076 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2013-08-27 17:46:32,098 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2013-08-27 17:46:32,107 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2013-08-27 17:46:32,113 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2013-08-27 17:46:32,121 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2013-08-27 17:46:32,128 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2013-08-27 17:46:32,136 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2013-08-27 17:46:32,142 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2013-08-27 17:46:32,151 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2013-08-27 17:46:32,166 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2013-08-27 17:46:32,172 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2013-08-27 17:46:32,181 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member
2013-08-27 17:46:32,189 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_address
2013-08-27 17:46:32,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_login
2013-08-27 17:46:32,209 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_security
2013-08-27 17:46:32,215 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_service
2013-08-27 17:46:32,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_status
2013-08-27 17:46:32,228 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_withdrawal
2013-08-27 17:46:32,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product
2013-08-27 17:46:32,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_category
2013-08-27 17:46:32,248 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_status
2013-08-27 17:46:32,254 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table purchase
2013-08-27 17:46:32,260 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table region
2013-08-27 17:46:32,267 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table service_rank
2013-08-27 17:46:32,273 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table withdrawal_reason
2013-08-27 17:46:32,310 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2013-08-27 17:46:32,310 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2013-08-27 17:46:32,311 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2013-08-27 17:46:32,312 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2013-08-27 17:46:32,313 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2013-08-27 17:46:32,314 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2013-08-27 17:46:32,320 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-00-system.sql
2013-08-27 17:46:32,324 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database exampledb
2013-08-27 17:46:32,327 [main] INFO  (DfCreateSchemaProcess$1#dispatch():273) - ...Creating a connection to system
2013-08-27 17:46:32,328 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():509) - ...Creating a connection for additional user
2013-08-27 17:46:32,342 [main] INFO  (DfCreateSchemaProcess$1#dispatch():299) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2013-08-27 17:46:32,343 [main] INFO  (DfCreateSchemaProcess$1#dispatch():301) -  -> Can't create database 'exampledb'; database exists
2013-08-27 17:46:32,345 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():411) - ...Reviving the user 'system' until the end of this SQL file
2013-08-27 17:46:32,346 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on exampledb.*
  to exampuser@localhost identified by 'exampword'
2013-08-27 17:46:32,350 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2013-08-27 17:46:32,353 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2013-08-27 17:46:32,354 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2013-08-27 17:46:32,356 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():348) - ...Saying good-bye to the user 'system' again
2013-08-27 17:46:32,362 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():352) - ...Clearing revived users
2013-08-27 17:46:32,363 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():359) - ...Coming back to the main user from the user 'system'
2013-08-27 17:46:32,370 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2013-08-27 17:46:32,398 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2013-08-27 17:46:32,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2013-08-27 17:46:32,452 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2013-08-27 17:46:32,474 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2013-08-27 17:46:32,498 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2013-08-27 17:46:32,519 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2013-08-27 17:46:32,540 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(200) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2013-08-27 17:46:32,563 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2013-08-27 17:46:32,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2013-08-27 17:46:32,616 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2013-08-27 17:46:32,639 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2013-08-27 17:46:32,659 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2013-08-27 17:46:32,685 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2013-08-27 17:46:32,705 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER ADD CONSTRAINT FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-27 17:46:32,767 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:32,817 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES REGION (REGION_ID)
2013-08-27 17:46:32,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-27 17:46:32,885 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:32,940 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:32,982 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) REFERENCES SERVICE_RANK (SERVICE_RANK_CODE)
2013-08-27 17:46:33,025 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SECURITY ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:33,052 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:33,080 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) REFERENCES WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2013-08-27 17:46:33,128 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-27 17:46:33,189 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
2013-08-27 17:46:33,225 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-27 17:46:33,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) REFERENCES PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2013-08-27 17:46:33,322 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-27 17:46:33,374 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_MEMBER_NAME ON MEMBER(MEMBER_NAME)
2013-08-27 17:46:33,393 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_FORMALIZED_DATETIME ON MEMBER(FORMALIZED_DATETIME)
2013-08-27 17:46:33,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_LOGIN_DATETIME ON MEMBER_LOGIN(LOGIN_DATETIME)
2013-08-27 17:46:33,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_SERVICE_POINT_COUNT ON MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2013-08-27 17:46:33,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRODUCT_DATETIME ON PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2013-08-27 17:46:33,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_DATETIME_MEMBER ON PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2013-08-27 17:46:33,507 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRICE ON PURCHASE(PURCHASE_PRICE)
2013-08-27 17:46:33,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PRODUCT_PRODUCT_NAME ON PRODUCT(PRODUCT_NAME)
2013-08-27 17:46:33,631 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=37 failure=0
2013-08-27 17:46:33,632 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=39 failure=0 (in 2 files)
2013-08-27 17:46:33,632 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():542) - ...Closing connections to change-users: [system]
2013-08-27 17:46:33,694 [main] INFO  (DfLoadDataProcess#execute():129) - 
2013-08-27 17:46:33,696 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2013-08-27 17:46:33,696 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2013-08-27 17:46:33,697 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2013-08-27 17:46:33,698 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2013-08-27 17:46:33,699 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2013-08-27 17:46:33,734 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-27 17:46:33,735 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\common\xls\10-master.xls)
2013-08-27 17:46:33,736 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-27 17:46:34,232 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2013-08-27 17:46:34,272 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2013-08-27 17:46:34,273 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2013-08-27 17:46:34,277 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to MEMBER_STATUS
2013-08-27 17:46:34,281 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{1, アメリカ}
2013-08-27 17:46:34,282 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{2, カナダ}
2013-08-27 17:46:34,283 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{3, 中国}
2013-08-27 17:46:34,284 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{4, 千葉}
2013-08-27 17:46:34,286 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to REGION
2013-08-27 17:46:34,288 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2013-08-27 17:46:34,289 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2013-08-27 17:46:34,290 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2013-08-27 17:46:34,291 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2013-08-27 17:46:34,292 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2013-08-27 17:46:34,295 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to SERVICE_RANK
2013-08-27 17:46:34,296 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2013-08-27 17:46:34,297 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2013-08-27 17:46:34,298 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2013-08-27 17:46:34,299 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2013-08-27 17:46:34,302 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2013-08-27 17:46:34,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2013-08-27 17:46:34,305 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{FOD, 食品, null}
2013-08-27 17:46:34,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2013-08-27 17:46:34,306 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2013-08-27 17:46:34,307 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2013-08-27 17:46:34,309 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2013-08-27 17:46:34,310 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{ONS, 生産販売可能}
2013-08-27 17:46:34,311 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{PST, 生産中止}
2013-08-27 17:46:34,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{SST, 販売中止}
2013-08-27 17:46:34,315 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to PRODUCT_STATUS
2013-08-27 17:46:34,319 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2013-08-27 17:46:34,334 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2013-08-27 17:46:34,335 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2013-08-27 17:46:34,336 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2013-08-27 17:46:34,336 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2013-08-27 17:46:34,337 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2013-08-27 17:46:34,337 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2013-08-27 17:46:34,349 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2013-08-27 17:46:34,351 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2013-08-27 17:46:34,352 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=0 failure=0 (in 1 files)
2013-08-27 17:46:34,354 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-08-27 17:46:34,359 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s725ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Create Schema}: success=39 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=1
  (common)
  o 10-master.xls

 {Take Finally}: success=0 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2013-08-28 14:30:10,658 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2013-08-28 14:30:10,663 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2013-08-28 14:30:10,663 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2013-08-28 14:30:10,701 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2013-08-28 14:30:10,703 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2013-08-28 14:30:10,706 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2013-08-28 14:30:13,566 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-28 14:30:13,567 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-28 14:30:13,567 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-28 14:30:13,568 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-28 14:30:13,584 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-28 14:30:13,861 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():229) -   product = MySQL 5.6.13
2013-08-28 14:30:13,862 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():230) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-08-28 14:30:13,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2013-08-28 14:30:13,888 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2013-08-28 14:30:13,889 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2013-08-28 14:30:13,890 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2013-08-28 14:30:13,891 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2013-08-28 14:30:13,891 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2013-08-28 14:30:13,911 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-08-28 14:30:13,912 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-08-28 14:30:13,913 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-08-28 14:30:13,967 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_address
2013-08-28 14:30:14,007 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_login
2013-08-28 14:30:14,027 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_security
2013-08-28 14:30:14,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_service
2013-08-28 14:30:14,060 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_withdrawal
2013-08-28 14:30:14,096 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table purchase
2013-08-28 14:30:14,160 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2013-08-28 14:30:14,168 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2013-08-28 14:30:14,177 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2013-08-28 14:30:14,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2013-08-28 14:30:14,189 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2013-08-28 14:30:14,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2013-08-28 14:30:14,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2013-08-28 14:30:14,209 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2013-08-28 14:30:14,217 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2013-08-28 14:30:14,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2013-08-28 14:30:14,229 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2013-08-28 14:30:14,235 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2013-08-28 14:30:14,241 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2013-08-28 14:30:14,252 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2013-08-28 14:30:14,258 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2013-08-28 14:30:14,266 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member
2013-08-28 14:30:14,273 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_address
2013-08-28 14:30:14,279 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_login
2013-08-28 14:30:14,286 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_security
2013-08-28 14:30:14,291 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_service
2013-08-28 14:30:14,297 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_status
2013-08-28 14:30:14,305 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_withdrawal
2013-08-28 14:30:14,311 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product
2013-08-28 14:30:14,320 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_category
2013-08-28 14:30:14,327 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_status
2013-08-28 14:30:14,335 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table purchase
2013-08-28 14:30:14,341 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table region
2013-08-28 14:30:14,349 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table service_rank
2013-08-28 14:30:14,358 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table withdrawal_reason
2013-08-28 14:30:14,397 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2013-08-28 14:30:14,397 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2013-08-28 14:30:14,398 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2013-08-28 14:30:14,399 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2013-08-28 14:30:14,399 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2013-08-28 14:30:14,400 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2013-08-28 14:30:14,406 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-00-system.sql
2013-08-28 14:30:14,413 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database exampledb
2013-08-28 14:30:14,415 [main] INFO  (DfCreateSchemaProcess$1#dispatch():273) - ...Creating a connection to system
2013-08-28 14:30:14,417 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():509) - ...Creating a connection for additional user
2013-08-28 14:30:14,429 [main] INFO  (DfCreateSchemaProcess$1#dispatch():299) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2013-08-28 14:30:14,429 [main] INFO  (DfCreateSchemaProcess$1#dispatch():301) -  -> Can't create database 'exampledb'; database exists
2013-08-28 14:30:14,431 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():411) - ...Reviving the user 'system' until the end of this SQL file
2013-08-28 14:30:14,432 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on exampledb.*
  to exampuser@localhost identified by 'exampword'
2013-08-28 14:30:14,437 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2013-08-28 14:30:14,444 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2013-08-28 14:30:14,445 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2013-08-28 14:30:14,446 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():348) - ...Saying good-bye to the user 'system' again
2013-08-28 14:30:14,452 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():352) - ...Clearing revived users
2013-08-28 14:30:14,453 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():359) - ...Coming back to the main user from the user 'system'
2013-08-28 14:30:14,461 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2013-08-28 14:30:14,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2013-08-28 14:30:14,540 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2013-08-28 14:30:14,574 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2013-08-28 14:30:14,604 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2013-08-28 14:30:14,622 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2013-08-28 14:30:14,640 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2013-08-28 14:30:14,665 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(200) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2013-08-28 14:30:14,695 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2013-08-28 14:30:14,724 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2013-08-28 14:30:14,760 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2013-08-28 14:30:14,787 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2013-08-28 14:30:14,800 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2013-08-28 14:30:14,829 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2013-08-28 14:30:14,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER ADD CONSTRAINT FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-28 14:30:14,902 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:14,951 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES REGION (REGION_ID)
2013-08-28 14:30:15,006 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-28 14:30:15,043 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:15,075 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:15,124 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) REFERENCES SERVICE_RANK (SERVICE_RANK_CODE)
2013-08-28 14:30:15,172 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SECURITY ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:15,202 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:15,231 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) REFERENCES WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2013-08-28 14:30:15,279 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:30:15,351 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
2013-08-28 14:30:15,385 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-28 14:30:15,418 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) REFERENCES PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2013-08-28 14:30:15,487 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-28 14:30:15,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_MEMBER_NAME ON MEMBER(MEMBER_NAME)
2013-08-28 14:30:15,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_FORMALIZED_DATETIME ON MEMBER(FORMALIZED_DATETIME)
2013-08-28 14:30:15,570 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_LOGIN_DATETIME ON MEMBER_LOGIN(LOGIN_DATETIME)
2013-08-28 14:30:15,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_SERVICE_POINT_COUNT ON MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2013-08-28 14:30:15,600 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRODUCT_DATETIME ON PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2013-08-28 14:30:15,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_DATETIME_MEMBER ON PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2013-08-28 14:30:15,673 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRICE ON PURCHASE(PURCHASE_PRICE)
2013-08-28 14:30:15,733 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PRODUCT_PRODUCT_NAME ON PRODUCT(PRODUCT_NAME)
2013-08-28 14:30:15,777 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=37 failure=0
2013-08-28 14:30:15,777 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=39 failure=0 (in 2 files)
2013-08-28 14:30:15,778 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():542) - ...Closing connections to change-users: [system]
2013-08-28 14:30:15,825 [main] INFO  (DfLoadDataProcess#execute():129) - 
2013-08-28 14:30:15,826 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2013-08-28 14:30:15,826 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2013-08-28 14:30:15,827 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2013-08-28 14:30:15,827 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2013-08-28 14:30:15,828 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2013-08-28 14:30:15,854 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-28 14:30:15,855 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\common\xls\10-master.xls)
2013-08-28 14:30:15,856 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-28 14:30:16,262 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2013-08-28 14:30:16,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2013-08-28 14:30:16,304 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2013-08-28 14:30:16,308 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to MEMBER_STATUS
2013-08-28 14:30:16,312 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{1, アメリカ}
2013-08-28 14:30:16,313 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{2, カナダ}
2013-08-28 14:30:16,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{3, 中国}
2013-08-28 14:30:16,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{4, 千葉}
2013-08-28 14:30:16,317 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to REGION
2013-08-28 14:30:16,318 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2013-08-28 14:30:16,320 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2013-08-28 14:30:16,321 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2013-08-28 14:30:16,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2013-08-28 14:30:16,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2013-08-28 14:30:16,325 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to SERVICE_RANK
2013-08-28 14:30:16,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2013-08-28 14:30:16,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2013-08-28 14:30:16,327 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2013-08-28 14:30:16,328 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2013-08-28 14:30:16,330 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2013-08-28 14:30:16,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2013-08-28 14:30:16,333 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{FOD, 食品, null}
2013-08-28 14:30:16,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2013-08-28 14:30:16,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2013-08-28 14:30:16,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2013-08-28 14:30:16,339 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2013-08-28 14:30:16,340 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{ONS, 生産販売可能}
2013-08-28 14:30:16,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{PST, 生産中止}
2013-08-28 14:30:16,341 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{SST, 販売中止}
2013-08-28 14:30:16,343 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to PRODUCT_STATUS
2013-08-28 14:30:16,347 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-28 14:30:16,348 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\ut\xls\20-member.xls)
2013-08-28 14:30:16,348 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-28 14:30:16,438 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03}
2013-08-28 14:30:16,445 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15}
2013-08-28 14:30:16,446 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null}
2013-08-28 14:30:16,447 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11}
2013-08-28 14:30:16,449 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null}
2013-08-28 14:30:16,450 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20}
2013-08-28 14:30:16,451 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30, null}
2013-08-28 14:30:16,452 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null}
2013-08-28 14:30:16,453 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20}
2013-08-28 14:30:16,454 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null}
2013-08-28 14:30:16,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08}
2013-08-28 14:30:16,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01}
2013-08-28 14:30:16,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26}
2013-08-28 14:30:16,459 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21}
2013-08-28 14:30:16,460 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12}
2013-08-28 14:30:16,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null}
2013-08-28 14:30:16,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null}
2013-08-28 14:30:16,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18}
2013-08-28 14:30:16,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10}
2013-08-28 14:30:16,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null}
2013-08-28 14:30:16,471 [main] INFO  (DfXlsDataHandlerImpl#doWriteDataTable():225) - ...Retrying by suppressing batch update: MEMBER
2013-08-28 14:30:16,478 [main] ERROR (DfDBFluteTaskUtil#logException():161) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 5.6.13

[JDBC Driver]
MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
* * * * * * * * * */
org.seasar.dbflute.exception.DfXlsDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Xls File]
playsql\data\ut\xls\20-member.xls

[Table]
MEMBER

[SQLException]
java.sql.BatchUpdateException
Field 'REGISTER_DATETIME' doesn't have a default value

[Non-Batch Retry]
java.sql.SQLException
Field 'REGISTER_DATETIME' doesn't have a default value
[MEMBER_ID, MEMBER_NAME, MEMBER_ACCOUNT, MEMBER_STATUS_CODE, FORMALIZED_DATETIME, BIRTHDATE]
{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03}
Row Number: 1

[Bind Type]
MEMBER_ID = java.lang.Integer
MEMBER_NAME = java.lang.String (RealStringProcessor)
MEMBER_ACCOUNT = java.lang.String (RealStringProcessor)
MEMBER_STATUS_CODE = java.lang.String (RealStringProcessor)
FORMALIZED_DATETIME = java.sql.Timestamp (DateStringProcessor)
BIRTHDATE = java.util.Date (DateStringProcessor)
* * * * * * * * * */
	at org.seasar.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.handleWriteTableException(DfXlsDataHandlerImpl.java:349)
	at org.seasar.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:255)
	at org.seasar.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataSet(DfXlsDataHandlerImpl.java:152)
	at org.seasar.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.writeSeveralData(DfXlsDataHandlerImpl.java:133)
	at org.seasar.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:319)
	at org.seasar.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXls(DfLoadDataProcess.java:307)
	at org.seasar.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromXlsAsLoadingTypeData(DfLoadDataProcess.java:291)
	at org.seasar.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:159)
	at org.seasar.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:274)
	at org.seasar.dbflute.task.DfReplaceSchemaTask.doExecuteCoreProcess(DfReplaceSchemaTask.java:238)
	at org.seasar.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:232)
	at org.seasar.dbflute.task.DfReplaceSchemaTask.processMain(DfReplaceSchemaTask.java:225)
	at org.seasar.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:153)
	at org.seasar.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:131)
	at org.seasar.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:184)
	at org.seasar.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:77)
	at org.seasar.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:153)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Field 'REGISTER_DATETIME' doesn't have a default value
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:2018)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1454)
	at org.seasar.dbflute.logic.replaceschema.loaddata.impl.DfXlsDataHandlerImpl.doWriteDataTable(DfXlsDataHandlerImpl.java:216)
	... 31 more
2013-08-28 14:30:16,524 [main] INFO  (DfDataSourceHandler#commit():94) - ...commit()
2013-08-28 14:30:16,525 [main] INFO  (DfDataSourceHandler#destroy():117) - ...rollback()
2013-08-28 14:30:16,525 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-08-28 14:30:16,531 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s868ms *Abort

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Create Schema}: success=39 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=1
  (common)
  o 10-master.xls
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2013-08-28 14:35:16,043 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2013-08-28 14:35:16,046 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2013-08-28 14:35:16,046 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2013-08-28 14:35:16,072 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2013-08-28 14:35:16,073 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2013-08-28 14:35:16,076 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2013-08-28 14:35:17,872 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-08-28 14:35:17,873 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-08-28 14:35:17,873 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-08-28 14:35:17,874 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-08-28 14:35:17,882 [main] INFO  (DfDataSourceHandler#createConnection():162) - ...Connecting to database by data source:
2013-08-28 14:35:18,128 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():229) -   product = MySQL 5.6.13
2013-08-28 14:35:18,129 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():230) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-08-28 14:35:18,151 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2013-08-28 14:35:18,151 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2013-08-28 14:35:18,152 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2013-08-28 14:35:18,153 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2013-08-28 14:35:18,154 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2013-08-28 14:35:18,154 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2013-08-28 14:35:18,175 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-08-28 14:35:18,176 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-08-28 14:35:18,177 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-08-28 14:35:18,215 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_address
2013-08-28 14:35:18,235 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_login
2013-08-28 14:35:18,250 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_security
2013-08-28 14:35:18,268 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_service
2013-08-28 14:35:18,300 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_withdrawal
2013-08-28 14:35:18,340 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table purchase
2013-08-28 14:35:18,354 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2013-08-28 14:35:18,400 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2013-08-28 14:35:18,411 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2013-08-28 14:35:18,419 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2013-08-28 14:35:18,425 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2013-08-28 14:35:18,433 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2013-08-28 14:35:18,441 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2013-08-28 14:35:18,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2013-08-28 14:35:18,454 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2013-08-28 14:35:18,460 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2013-08-28 14:35:18,470 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2013-08-28 14:35:18,477 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2013-08-28 14:35:18,484 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2013-08-28 14:35:18,493 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2013-08-28 14:35:18,499 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2013-08-28 14:35:18,511 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member
2013-08-28 14:35:18,517 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_address
2013-08-28 14:35:18,523 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_login
2013-08-28 14:35:18,529 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_security
2013-08-28 14:35:18,534 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_service
2013-08-28 14:35:18,543 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_status
2013-08-28 14:35:18,550 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_withdrawal
2013-08-28 14:35:18,560 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product
2013-08-28 14:35:18,569 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_category
2013-08-28 14:35:18,577 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_status
2013-08-28 14:35:18,585 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table purchase
2013-08-28 14:35:18,594 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table region
2013-08-28 14:35:18,601 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table service_rank
2013-08-28 14:35:18,610 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table withdrawal_reason
2013-08-28 14:35:18,645 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2013-08-28 14:35:18,646 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2013-08-28 14:35:18,647 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2013-08-28 14:35:18,647 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2013-08-28 14:35:18,648 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2013-08-28 14:35:18,648 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2013-08-28 14:35:18,654 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-00-system.sql
2013-08-28 14:35:18,659 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database exampledb
2013-08-28 14:35:18,662 [main] INFO  (DfCreateSchemaProcess$1#dispatch():273) - ...Creating a connection to system
2013-08-28 14:35:18,664 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():509) - ...Creating a connection for additional user
2013-08-28 14:35:18,677 [main] INFO  (DfCreateSchemaProcess$1#dispatch():299) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2013-08-28 14:35:18,678 [main] INFO  (DfCreateSchemaProcess$1#dispatch():301) -  -> Can't create database 'exampledb'; database exists
2013-08-28 14:35:18,680 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():411) - ...Reviving the user 'system' until the end of this SQL file
2013-08-28 14:35:18,680 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on exampledb.*
  to exampuser@localhost identified by 'exampword'
2013-08-28 14:35:18,684 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2013-08-28 14:35:18,687 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2013-08-28 14:35:18,688 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2013-08-28 14:35:18,689 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():348) - ...Saying good-bye to the user 'system' again
2013-08-28 14:35:18,696 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():352) - ...Clearing revived users
2013-08-28 14:35:18,696 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():359) - ...Coming back to the main user from the user 'system'
2013-08-28 14:35:18,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2013-08-28 14:35:18,743 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2013-08-28 14:35:18,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2013-08-28 14:35:18,802 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2013-08-28 14:35:18,825 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2013-08-28 14:35:18,849 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2013-08-28 14:35:18,880 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2013-08-28 14:35:18,908 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(200) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2013-08-28 14:35:18,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2013-08-28 14:35:18,962 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2013-08-28 14:35:18,980 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2013-08-28 14:35:18,995 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2013-08-28 14:35:19,009 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2013-08-28 14:35:19,027 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2013-08-28 14:35:19,047 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER ADD CONSTRAINT FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-28 14:35:19,109 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,157 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES REGION (REGION_ID)
2013-08-28 14:35:19,184 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-08-28 14:35:19,240 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,299 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,338 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) REFERENCES SERVICE_RANK (SERVICE_RANK_CODE)
2013-08-28 14:35:19,378 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SECURITY ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,410 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,443 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) REFERENCES WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2013-08-28 14:35:19,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-08-28 14:35:19,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
2013-08-28 14:35:19,605 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-28 14:35:19,638 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) REFERENCES PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2013-08-28 14:35:19,709 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-08-28 14:35:19,750 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_MEMBER_NAME ON MEMBER(MEMBER_NAME)
2013-08-28 14:35:19,764 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_FORMALIZED_DATETIME ON MEMBER(FORMALIZED_DATETIME)
2013-08-28 14:35:19,780 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_LOGIN_DATETIME ON MEMBER_LOGIN(LOGIN_DATETIME)
2013-08-28 14:35:19,795 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_SERVICE_POINT_COUNT ON MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2013-08-28 14:35:19,811 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRODUCT_DATETIME ON PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2013-08-28 14:35:19,829 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_DATETIME_MEMBER ON PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2013-08-28 14:35:19,885 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRICE ON PURCHASE(PURCHASE_PRICE)
2013-08-28 14:35:19,930 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PRODUCT_PRODUCT_NAME ON PRODUCT(PRODUCT_NAME)
2013-08-28 14:35:19,989 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=37 failure=0
2013-08-28 14:35:19,990 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=39 failure=0 (in 2 files)
2013-08-28 14:35:19,990 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():542) - ...Closing connections to change-users: [system]
2013-08-28 14:35:20,030 [main] INFO  (DfLoadDataProcess#execute():129) - 
2013-08-28 14:35:20,030 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2013-08-28 14:35:20,031 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2013-08-28 14:35:20,031 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2013-08-28 14:35:20,032 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2013-08-28 14:35:20,032 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2013-08-28 14:35:20,060 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-28 14:35:20,061 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\common\xls\10-master.xls)
2013-08-28 14:35:20,061 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-28 14:35:20,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2013-08-28 14:35:20,504 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2013-08-28 14:35:20,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2013-08-28 14:35:20,508 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to MEMBER_STATUS
2013-08-28 14:35:20,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{1, アメリカ}
2013-08-28 14:35:20,511 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{2, カナダ}
2013-08-28 14:35:20,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{3, 中国}
2013-08-28 14:35:20,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{4, 千葉}
2013-08-28 14:35:20,515 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to REGION
2013-08-28 14:35:20,516 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2013-08-28 14:35:20,518 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2013-08-28 14:35:20,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2013-08-28 14:35:20,519 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2013-08-28 14:35:20,520 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2013-08-28 14:35:20,522 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to SERVICE_RANK
2013-08-28 14:35:20,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2013-08-28 14:35:20,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2013-08-28 14:35:20,525 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2013-08-28 14:35:20,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2013-08-28 14:35:20,529 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2013-08-28 14:35:20,530 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2013-08-28 14:35:20,531 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{FOD, 食品, null}
2013-08-28 14:35:20,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2013-08-28 14:35:20,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2013-08-28 14:35:20,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2013-08-28 14:35:20,535 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2013-08-28 14:35:20,536 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{ONS, 生産販売可能}
2013-08-28 14:35:20,537 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{PST, 生産中止}
2013-08-28 14:35:20,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{SST, 販売中止}
2013-08-28 14:35:20,540 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to PRODUCT_STATUS
2013-08-28 14:35:20,544 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-28 14:35:20,545 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\ut\xls\20-member.xls)
2013-08-28 14:35:20,546 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-28 14:35:20,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2013-08-28 14:35:20.645, foo, 2013-08-28 14:35:20.645, foo, 0}
2013-08-28 14:35:20,652 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2013-08-28 14:35:20.652, foo, 2013-08-28 14:35:20.652, foo, 0}
2013-08-28 14:35:20,654 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2013-08-28 14:35:20.654, foo, 2013-08-28 14:35:20.654, foo, 0}
2013-08-28 14:35:20,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2013-08-28 14:35:20.656, foo, 2013-08-28 14:35:20.656, foo, 0}
2013-08-28 14:35:20,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2013-08-28 14:35:20.658, foo, 2013-08-28 14:35:20.658, foo, 0}
2013-08-28 14:35:20,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2013-08-28 14:35:20.659, foo, 2013-08-28 14:35:20.659, foo, 0}
2013-08-28 14:35:20,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30, null, 2013-08-28 14:35:20.661, foo, 2013-08-28 14:35:20.661, foo, 0}
2013-08-28 14:35:20,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2013-08-28 14:35:20.663, foo, 2013-08-28 14:35:20.663, foo, 0}
2013-08-28 14:35:20,664 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2013-08-28 14:35:20.664, foo, 2013-08-28 14:35:20.664, foo, 0}
2013-08-28 14:35:20,666 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2013-08-28 14:35:20.666, foo, 2013-08-28 14:35:20.666, foo, 0}
2013-08-28 14:35:20,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2013-08-28 14:35:20.667, foo, 2013-08-28 14:35:20.667, foo, 0}
2013-08-28 14:35:20,669 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2013-08-28 14:35:20.669, foo, 2013-08-28 14:35:20.669, foo, 0}
2013-08-28 14:35:20,671 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2013-08-28 14:35:20.67, foo, 2013-08-28 14:35:20.671, foo, 0}
2013-08-28 14:35:20,672 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2013-08-28 14:35:20.672, foo, 2013-08-28 14:35:20.672, foo, 0}
2013-08-28 14:35:20,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2013-08-28 14:35:20.674, foo, 2013-08-28 14:35:20.674, foo, 0}
2013-08-28 14:35:20,676 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2013-08-28 14:35:20.676, foo, 2013-08-28 14:35:20.676, foo, 0}
2013-08-28 14:35:20,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2013-08-28 14:35:20.677, foo, 2013-08-28 14:35:20.677, foo, 0}
2013-08-28 14:35:20,678 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2013-08-28 14:35:20.678, foo, 2013-08-28 14:35:20.678, foo, 0}
2013-08-28 14:35:20,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2013-08-28 14:35:20.68, foo, 2013-08-28 14:35:20.68, foo, 0}
2013-08-28 14:35:20,681 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2013-08-28 14:35:20.681, foo, 2013-08-28 14:35:20.681, foo, 0}
2013-08-28 14:35:20,691 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER
2013-08-28 14:35:20,693 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2013-08-28 14:35:20.693, foo, 2013-08-28 14:35:20.693, foo, 0}
2013-08-28 14:35:20,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2013-08-28 14:35:20.695, foo, 2013-08-28 14:35:20.695, foo, 0}
2013-08-28 14:35:20,697 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2013-08-28 14:35:20.697, foo, 2013-08-28 14:35:20.697, foo, 0}
2013-08-28 14:35:20,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2013-08-28 14:35:20.699, foo, 2013-08-28 14:35:20.699, foo, 0}
2013-08-28 14:35:20,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2013-08-28 14:35:20.701, foo, 2013-08-28 14:35:20.701, foo, 0}
2013-08-28 14:35:20,702 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2013-08-28 14:35:20.702, foo, 2013-08-28 14:35:20.702, foo, 0}
2013-08-28 14:35:20,704 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2013-08-28 14:35:20.704, foo, 2013-08-28 14:35:20.704, foo, 0}
2013-08-28 14:35:20,706 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2013-08-28 14:35:20.706, foo, 2013-08-28 14:35:20.706, foo, 0}
2013-08-28 14:35:20,708 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2013-08-28 14:35:20.708, foo, 2013-08-28 14:35:20.708, foo, 0}
2013-08-28 14:35:20,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2013-08-28 14:35:20.71, foo, 2013-08-28 14:35:20.71, foo, 0}
2013-08-28 14:35:20,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2013-08-28 14:35:20.712, foo, 2013-08-28 14:35:20.712, foo, 0}
2013-08-28 14:35:20,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2013-08-28 14:35:20.714, foo, 2013-08-28 14:35:20.714, foo, 0}
2013-08-28 14:35:20,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2013-08-28 14:35:20.715, foo, 2013-08-28 14:35:20.716, foo, 0}
2013-08-28 14:35:20,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2013-08-28 14:35:20.717, foo, 2013-08-28 14:35:20.717, foo, 0}
2013-08-28 14:35:20,719 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2013-08-28 14:35:20.719, foo, 2013-08-28 14:35:20.719, foo, 0}
2013-08-28 14:35:20,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2013-08-28 14:35:20.721, foo, 2013-08-28 14:35:20.721, foo, 0}
2013-08-28 14:35:20,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2013-08-28 14:35:20.723, foo, 2013-08-28 14:35:20.723, foo, 0}
2013-08-28 14:35:20,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2013-08-28 14:35:20.725, foo, 2013-08-28 14:35:20.725, foo, 0}
2013-08-28 14:35:20,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2013-08-28 14:35:20.726, foo, 2013-08-28 14:35:20.726, foo, 0}
2013-08-28 14:35:20,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2013-08-28 14:35:20.728, foo, 2013-08-28 14:35:20.728, foo, 0}
2013-08-28 14:35:20,735 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_ADDRESS
2013-08-28 14:35:20,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2013-08-28 14:35:20,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2013-08-28 14:35:20,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2013-08-28 14:35:20,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2013-08-28 14:35:20,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2013-08-28 14:35:20,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2013-08-28 14:35:20,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2013-08-28 14:35:20,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2013-08-28 14:35:20,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2013-08-28 14:35:20,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2013-08-28 14:35:20,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2013-08-28 14:35:20,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2013-08-28 14:35:20,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2013-08-28 14:35:20,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2013-08-28 14:35:20,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2013-08-28 14:35:20,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2013-08-28 14:35:20,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2013-08-28 14:35:20,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2013-08-28 14:35:20,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2013-08-28 14:35:20,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2013-08-28 14:35:20,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2013-08-28 14:35:20,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2013-08-28 14:35:20,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2013-08-28 14:35:20,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2013-08-28 14:35:20,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2013-08-28 14:35:20,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2013-08-28 14:35:20,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2013-08-28 14:35:20,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2013-08-28 14:35:20,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2013-08-28 14:35:20,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2013-08-28 14:35:20,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2013-08-28 14:35:20,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2013-08-28 14:35:20,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2013-08-28 14:35:20,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2013-08-28 14:35:20,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2013-08-28 14:35:20,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2013-08-28 14:35:20,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2013-08-28 14:35:20,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2013-08-28 14:35:20,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2013-08-28 14:35:20,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2013-08-28 14:35:20,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2013-08-28 14:35:20,801 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2013-08-28 14:35:20,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2013-08-28 14:35:20,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2013-08-28 14:35:20,805 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2013-08-28 14:35:20,806 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2013-08-28 14:35:20,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2013-08-28 14:35:20,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2013-08-28 14:35:20,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2013-08-28 14:35:20,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2013-08-28 14:35:20,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2013-08-28 14:35:20,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2013-08-28 14:35:20,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2013-08-28 14:35:20,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2013-08-28 14:35:20,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2013-08-28 14:35:20,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2013-08-28 14:35:20,830 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 56 rows are loaded to MEMBER_LOGIN
2013-08-28 14:35:20,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2013-08-28 14:35:20.831, foo, 2013-08-28 14:35:20.831, foo, 0}
2013-08-28 14:35:20,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2013-08-28 14:35:20.833, foo, 2013-08-28 14:35:20.833, foo, 0}
2013-08-28 14:35:20,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2013-08-28 14:35:20.834, foo, 2013-08-28 14:35:20.834, foo, 0}
2013-08-28 14:35:20,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2013-08-28 14:35:20.835, foo, 2013-08-28 14:35:20.835, foo, 0}
2013-08-28 14:35:20,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2013-08-28 14:35:20.836, foo, 2013-08-28 14:35:20.836, foo, 0}
2013-08-28 14:35:20,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2013-08-28 14:35:20.837, foo, 2013-08-28 14:35:20.837, foo, 0}
2013-08-28 14:35:20,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2013-08-28 14:35:20.838, foo, 2013-08-28 14:35:20.838, foo, 0}
2013-08-28 14:35:20,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2013-08-28 14:35:20.839, foo, 2013-08-28 14:35:20.839, foo, 0}
2013-08-28 14:35:20,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2013-08-28 14:35:20.84, foo, 2013-08-28 14:35:20.84, foo, 0}
2013-08-28 14:35:20,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2013-08-28 14:35:20.841, foo, 2013-08-28 14:35:20.841, foo, 0}
2013-08-28 14:35:20,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2013-08-28 14:35:20.842, foo, 2013-08-28 14:35:20.842, foo, 0}
2013-08-28 14:35:20,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2013-08-28 14:35:20.843, foo, 2013-08-28 14:35:20.843, foo, 0}
2013-08-28 14:35:20,844 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2013-08-28 14:35:20.844, foo, 2013-08-28 14:35:20.844, foo, 0}
2013-08-28 14:35:20,845 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2013-08-28 14:35:20.845, foo, 2013-08-28 14:35:20.845, foo, 0}
2013-08-28 14:35:20,846 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2013-08-28 14:35:20.846, foo, 2013-08-28 14:35:20.846, foo, 0}
2013-08-28 14:35:20,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2013-08-28 14:35:20.847, foo, 2013-08-28 14:35:20.847, foo, 0}
2013-08-28 14:35:20,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2013-08-28 14:35:20.848, foo, 2013-08-28 14:35:20.848, foo, 0}
2013-08-28 14:35:20,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2013-08-28 14:35:20.849, foo, 2013-08-28 14:35:20.849, foo, 0}
2013-08-28 14:35:20,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2013-08-28 14:35:20.85, foo, 2013-08-28 14:35:20.85, foo, 0}
2013-08-28 14:35:20,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2013-08-28 14:35:20.851, foo, 2013-08-28 14:35:20.851, foo, 0}
2013-08-28 14:35:20,863 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_SECURITY
2013-08-28 14:35:20,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{1, 1234, PLT, 2013-08-28 14:35:20.865, foo, 2013-08-28 14:35:20.865, foo, 0}
2013-08-28 14:35:20,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{2, 2345, GLD, 2013-08-28 14:35:20.867, foo, 2013-08-28 14:35:20.867, foo, 0}
2013-08-28 14:35:20,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{3, 3456, GLD, 2013-08-28 14:35:20.868, foo, 2013-08-28 14:35:20.868, foo, 0}
2013-08-28 14:35:20,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{4, 875, BRZ, 2013-08-28 14:35:20.869, foo, 2013-08-28 14:35:20.869, foo, 0}
2013-08-28 14:35:20,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{5, 1111, BRZ, 2013-08-28 14:35:20.87, foo, 2013-08-28 14:35:20.87, foo, 0}
2013-08-28 14:35:20,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{6, 5422, SIL, 2013-08-28 14:35:20.871, foo, 2013-08-28 14:35:20.871, foo, 0}
2013-08-28 14:35:20,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{7, 24678, SIL, 2013-08-28 14:35:20.872, foo, 2013-08-28 14:35:20.872, foo, 0}
2013-08-28 14:35:20,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{8, 234, SIL, 2013-08-28 14:35:20.872, foo, 2013-08-28 14:35:20.873, foo, 0}
2013-08-28 14:35:20,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{9, 3, SIL, 2013-08-28 14:35:20.874, foo, 2013-08-28 14:35:20.874, foo, 0}
2013-08-28 14:35:20,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{10, 98765, PLT, 2013-08-28 14:35:20.875, foo, 2013-08-28 14:35:20.875, foo, 0}
2013-08-28 14:35:20,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{11, 34, GLD, 2013-08-28 14:35:20.876, foo, 2013-08-28 14:35:20.876, foo, 0}
2013-08-28 14:35:20,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{12, 532, PLT, 2013-08-28 14:35:20.877, foo, 2013-08-28 14:35:20.877, foo, 0}
2013-08-28 14:35:20,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{13, 23678, GLD, 2013-08-28 14:35:20.878, foo, 2013-08-28 14:35:20.878, foo, 0}
2013-08-28 14:35:20,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{14, 432, GLD, 2013-08-28 14:35:20.879, foo, 2013-08-28 14:35:20.879, foo, 0}
2013-08-28 14:35:20,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{15, 543, BRZ, 2013-08-28 14:35:20.879, foo, 2013-08-28 14:35:20.879, foo, 0}
2013-08-28 14:35:20,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{16, 23545, PLT, 2013-08-28 14:35:20.88, foo, 2013-08-28 14:35:20.88, foo, 0}
2013-08-28 14:35:20,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{17, 2345, GLD, 2013-08-28 14:35:20.881, foo, 2013-08-28 14:35:20.881, foo, 0}
2013-08-28 14:35:20,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{18, 8763, SIL, 2013-08-28 14:35:20.882, foo, 2013-08-28 14:35:20.882, foo, 0}
2013-08-28 14:35:20,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{19, 34567, SIL, 2013-08-28 14:35:20.883, foo, 2013-08-28 14:35:20.883, foo, 0}
2013-08-28 14:35:20,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{20, 43, GLD, 2013-08-28 14:35:20.884, foo, 2013-08-28 14:35:20.884, foo, 0}
2013-08-28 14:35:20,894 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_SERVICE
2013-08-28 14:35:20,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2013-08-28 14:35:20.895, foo, 2013-08-28 14:35:20.895, foo}
2013-08-28 14:35:20,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2013-08-28 14:35:20.92, foo, 2013-08-28 14:35:20.92, foo}
2013-08-28 14:35:20,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2013-08-28 14:35:20.922, foo, 2013-08-28 14:35:20.922, foo}
2013-08-28 14:35:20,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2013-08-28 14:35:20.923, foo, 2013-08-28 14:35:20.923, foo}
2013-08-28 14:35:20,926 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2013-08-28 14:35:20,927 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-08-28 14:35:20,927 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\ut\xls\30-product.xls)
2013-08-28 14:35:20,928 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-08-28 14:35:20,982 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2013-08-28 14:35:20.982, foo, 2013-08-28 14:35:20.982, foo, 0}
2013-08-28 14:35:20,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2013-08-28 14:35:20.984, foo, 2013-08-28 14:35:20.984, foo, 0}
2013-08-28 14:35:20,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2013-08-28 14:35:20.986, foo, 2013-08-28 14:35:20.986, foo, 0}
2013-08-28 14:35:20,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2013-08-28 14:35:20.987, foo, 2013-08-28 14:35:20.987, foo, 0}
2013-08-28 14:35:20,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2013-08-28 14:35:20.988, foo, 2013-08-28 14:35:20.988, foo, 0}
2013-08-28 14:35:20,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2013-08-28 14:35:20.99, foo, 2013-08-28 14:35:20.99, foo, 0}
2013-08-28 14:35:20,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2013-08-28 14:35:20.992, foo, 2013-08-28 14:35:20.992, foo, 0}
2013-08-28 14:35:20,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2013-08-28 14:35:20.994, foo, 2013-08-28 14:35:20.994, foo, 0}
2013-08-28 14:35:20,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2013-08-28 14:35:20.995, foo, 2013-08-28 14:35:20.995, foo, 0}
2013-08-28 14:35:20,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2013-08-28 14:35:20.996, foo, 2013-08-28 14:35:20.996, foo, 0}
2013-08-28 14:35:20,997 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2013-08-28 14:35:20.997, foo, 2013-08-28 14:35:20.997, foo, 0}
2013-08-28 14:35:20,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2013-08-28 14:35:20.997, foo, 2013-08-28 14:35:20.997, foo, 0}
2013-08-28 14:35:20,998 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2013-08-28 14:35:20.998, foo, 2013-08-28 14:35:20.998, foo, 0}
2013-08-28 14:35:20,999 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2013-08-28 14:35:20.999, foo, 2013-08-28 14:35:20.999, foo, 0}
2013-08-28 14:35:21,000 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2013-08-28 14:35:21.0, foo, 2013-08-28 14:35:21.0, foo, 0}
2013-08-28 14:35:21,001 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2013-08-28 14:35:21.001, foo, 2013-08-28 14:35:21.001, foo, 0}
2013-08-28 14:35:21,002 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2013-08-28 14:35:21.002, foo, 2013-08-28 14:35:21.002, foo, 0}
2013-08-28 14:35:21,003 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2013-08-28 14:35:21.003, foo, 2013-08-28 14:35:21.003, foo, 0}
2013-08-28 14:35:21,004 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2013-08-28 14:35:21.004, foo, 2013-08-28 14:35:21.004, foo, 0}
2013-08-28 14:35:21,005 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2013-08-28 14:35:21.005, foo, 2013-08-28 14:35:21.005, foo, 0}
2013-08-28 14:35:21,017 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to PRODUCT
2013-08-28 14:35:21,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2013-08-28 14:35:21.018, foo, 2013-08-28 14:35:21.018, foo, 0}
2013-08-28 14:35:21,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2013-08-28 14:35:21.02, foo, 2013-08-28 14:35:21.02, foo, 0}
2013-08-28 14:35:21,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2013-08-28 14:35:21.021, foo, 2013-08-28 14:35:21.021, foo, 0}
2013-08-28 14:35:21,023 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2013-08-28 14:35:21.023, foo, 2013-08-28 14:35:21.023, foo, 0}
2013-08-28 14:35:21,024 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2013-08-28 14:35:21.024, foo, 2013-08-28 14:35:21.024, foo, 0}
2013-08-28 14:35:21,026 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2013-08-28 14:35:21.026, foo, 2013-08-28 14:35:21.026, foo, 0}
2013-08-28 14:35:21,027 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2013-08-28 14:35:21.027, foo, 2013-08-28 14:35:21.027, foo, 0}
2013-08-28 14:35:21,028 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2013-08-28 14:35:21.028, foo, 2013-08-28 14:35:21.028, foo, 0}
2013-08-28 14:35:21,030 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2013-08-28 14:35:21.029, foo, 2013-08-28 14:35:21.029, foo, 0}
2013-08-28 14:35:21,031 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2013-08-28 14:35:21.031, foo, 2013-08-28 14:35:21.031, foo, 0}
2013-08-28 14:35:21,032 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2013-08-28 14:35:21.032, foo, 2013-08-28 14:35:21.032, foo, 0}
2013-08-28 14:35:21,034 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2013-08-28 14:35:21.033, foo, 2013-08-28 14:35:21.033, foo, 0}
2013-08-28 14:35:21,035 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2013-08-28 14:35:21.035, foo, 2013-08-28 14:35:21.035, foo, 0}
2013-08-28 14:35:21,036 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2013-08-28 14:35:21.036, foo, 2013-08-28 14:35:21.036, foo, 0}
2013-08-28 14:35:21,037 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2013-08-28 14:35:21.037, foo, 2013-08-28 14:35:21.037, foo, 0}
2013-08-28 14:35:21,039 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2013-08-28 14:35:21.039, foo, 2013-08-28 14:35:21.039, foo, 0}
2013-08-28 14:35:21,040 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2013-08-28 14:35:21.04, foo, 2013-08-28 14:35:21.04, foo, 0}
2013-08-28 14:35:21,041 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2013-08-28 14:35:21.041, foo, 2013-08-28 14:35:21.041, foo, 0}
2013-08-28 14:35:21,043 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2013-08-28 14:35:21.043, foo, 2013-08-28 14:35:21.043, foo, 0}
2013-08-28 14:35:21,044 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2013-08-28 14:35:21.044, foo, 2013-08-28 14:35:21.044, foo, 0}
2013-08-28 14:35:21,045 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2013-08-28 14:35:21.045, foo, 2013-08-28 14:35:21.045, foo, 0}
2013-08-28 14:35:21,047 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2013-08-28 14:35:21.046, foo, 2013-08-28 14:35:21.046, foo, 0}
2013-08-28 14:35:21,048 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2013-08-28 14:35:21.048, foo, 2013-08-28 14:35:21.048, foo, 0}
2013-08-28 14:35:21,050 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2013-08-28 14:35:21.049, foo, 2013-08-28 14:35:21.049, foo, 0}
2013-08-28 14:35:21,051 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2013-08-28 14:35:21.051, foo, 2013-08-28 14:35:21.051, foo, 0}
2013-08-28 14:35:21,053 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2013-08-28 14:35:21.052, foo, 2013-08-28 14:35:21.052, foo, 0}
2013-08-28 14:35:21,054 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2013-08-28 14:35:21.054, foo, 2013-08-28 14:35:21.054, foo, 0}
2013-08-28 14:35:21,055 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2013-08-28 14:35:21.055, foo, 2013-08-28 14:35:21.055, foo, 0}
2013-08-28 14:35:21,057 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2013-08-28 14:35:21.057, foo, 2013-08-28 14:35:21.057, foo, 0}
2013-08-28 14:35:21,059 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2013-08-28 14:35:21.058, foo, 2013-08-28 14:35:21.058, foo, 0}
2013-08-28 14:35:21,060 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2013-08-28 14:35:21.06, foo, 2013-08-28 14:35:21.06, foo, 0}
2013-08-28 14:35:21,062 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2013-08-28 14:35:21.062, foo, 2013-08-28 14:35:21.062, foo, 0}
2013-08-28 14:35:21,064 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2013-08-28 14:35:21.064, foo, 2013-08-28 14:35:21.064, foo, 0}
2013-08-28 14:35:21,066 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2013-08-28 14:35:21.065, foo, 2013-08-28 14:35:21.065, foo, 0}
2013-08-28 14:35:21,067 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2013-08-28 14:35:21.067, foo, 2013-08-28 14:35:21.067, foo, 0}
2013-08-28 14:35:21,068 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2013-08-28 14:35:21.068, foo, 2013-08-28 14:35:21.068, foo, 0}
2013-08-28 14:35:21,069 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2013-08-28 14:35:21.069, foo, 2013-08-28 14:35:21.069, foo, 0}
2013-08-28 14:35:21,071 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2013-08-28 14:35:21.071, foo, 2013-08-28 14:35:21.071, foo, 0}
2013-08-28 14:35:21,072 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2013-08-28 14:35:21.072, foo, 2013-08-28 14:35:21.072, foo, 0}
2013-08-28 14:35:21,073 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2013-08-28 14:35:21.073, foo, 2013-08-28 14:35:21.073, foo, 0}
2013-08-28 14:35:21,075 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2013-08-28 14:35:21.074, foo, 2013-08-28 14:35:21.074, foo, 0}
2013-08-28 14:35:21,076 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2013-08-28 14:35:21.076, foo, 2013-08-28 14:35:21.076, foo, 0}
2013-08-28 14:35:21,077 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2013-08-28 14:35:21.077, foo, 2013-08-28 14:35:21.077, foo, 0}
2013-08-28 14:35:21,078 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2013-08-28 14:35:21.078, foo, 2013-08-28 14:35:21.078, foo, 0}
2013-08-28 14:35:21,080 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2013-08-28 14:35:21.079, foo, 2013-08-28 14:35:21.079, foo, 0}
2013-08-28 14:35:21,081 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2013-08-28 14:35:21.081, foo, 2013-08-28 14:35:21.081, foo, 0}
2013-08-28 14:35:21,082 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2013-08-28 14:35:21.082, foo, 2013-08-28 14:35:21.082, foo, 0}
2013-08-28 14:35:21,083 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2013-08-28 14:35:21.083, foo, 2013-08-28 14:35:21.083, foo, 0}
2013-08-28 14:35:21,084 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2013-08-28 14:35:21.084, foo, 2013-08-28 14:35:21.084, foo, 0}
2013-08-28 14:35:21,086 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2013-08-28 14:35:21.086, foo, 2013-08-28 14:35:21.086, foo, 0}
2013-08-28 14:35:21,087 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2013-08-28 14:35:21.087, foo, 2013-08-28 14:35:21.087, foo, 0}
2013-08-28 14:35:21,089 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2013-08-28 14:35:21.089, foo, 2013-08-28 14:35:21.089, foo, 0}
2013-08-28 14:35:21,091 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2013-08-28 14:35:21.09, foo, 2013-08-28 14:35:21.09, foo, 0}
2013-08-28 14:35:21,092 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2013-08-28 14:35:21.092, foo, 2013-08-28 14:35:21.092, foo, 0}
2013-08-28 14:35:21,093 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2013-08-28 14:35:21.093, foo, 2013-08-28 14:35:21.093, foo, 0}
2013-08-28 14:35:21,094 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2013-08-28 14:35:21.094, foo, 2013-08-28 14:35:21.094, foo, 0}
2013-08-28 14:35:21,095 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2013-08-28 14:35:21.095, foo, 2013-08-28 14:35:21.095, foo, 0}
2013-08-28 14:35:21,097 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2013-08-28 14:35:21.097, foo, 2013-08-28 14:35:21.097, foo, 0}
2013-08-28 14:35:21,098 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2013-08-28 14:35:21.098, foo, 2013-08-28 14:35:21.098, foo, 0}
2013-08-28 14:35:21,099 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2013-08-28 14:35:21.099, foo, 2013-08-28 14:35:21.099, foo, 0}
2013-08-28 14:35:21,114 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 60 rows are loaded to PURCHASE
2013-08-28 14:35:21,116 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2013-08-28 14:35:21,136 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2013-08-28 14:35:21,136 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2013-08-28 14:35:21,137 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2013-08-28 14:35:21,138 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2013-08-28 14:35:21,138 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2013-08-28 14:35:21,139 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2013-08-28 14:35:21,150 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2013-08-28 14:35:21,151 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2013-08-28 14:35:21,152 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=0 failure=0 (in 1 files)
2013-08-28 14:35:21,154 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-08-28 14:35:21,159 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m05s112ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Create Schema}: success=39 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=0 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2013-10-29 20:22:07,047 [main] INFO  (DfReplaceSchemaTask#begin():87) - +------------------------------------------+
2013-10-29 20:22:07,050 [main] INFO  (DfReplaceSchemaTask#begin():88) - |                                          |
2013-10-29 20:22:07,050 [main] INFO  (DfReplaceSchemaTask#begin():89) - |              ReplaceSchema               |
2013-10-29 20:22:07,068 [main] INFO  (DfReplaceSchemaTask#begin():97) - |                                          |
2013-10-29 20:22:07,068 [main] INFO  (DfReplaceSchemaTask#begin():98) - +------------------------------------------+
2013-10-29 20:22:07,070 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():329) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2013-10-29 20:22:08,918 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:08,920 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:08,924 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:08,925 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:08,934 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2013-10-29 20:22:09,141 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = MySQL 5.6.13
2013-10-29 20:22:09,142 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-10-29 20:22:09,161 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():207) - 
2013-10-29 20:22:09,161 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():208) - * * * * * * * * * * *
2013-10-29 20:22:09,162 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():209) - *                   *
2013-10-29 20:22:09,163 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():210) - * Initialize Schema *
2013-10-29 20:22:09,163 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():211) - *                   *
2013-10-29 20:22:09,164 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():212) - * * * * * * * * * * *
2013-10-29 20:22:09,181 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-10-29 20:22:09,182 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-10-29 20:22:09,182 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-10-29 20:22:09,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_address
2013-10-29 20:22:09,285 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_login
2013-10-29 20:22:09,328 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_security
2013-10-29 20:22:09,357 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_service
2013-10-29 20:22:09,373 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table member_withdrawal
2013-10-29 20:22:09,442 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - truncate table purchase
2013-10-29 20:22:09,453 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2013-10-29 20:22:09,484 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2013-10-29 20:22:09,489 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2013-10-29 20:22:09,498 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2013-10-29 20:22:09,504 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2013-10-29 20:22:09,511 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2013-10-29 20:22:09,527 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2013-10-29 20:22:09,533 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2013-10-29 20:22:09,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2013-10-29 20:22:09,547 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2013-10-29 20:22:09,553 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2013-10-29 20:22:09,560 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2013-10-29 20:22:09,565 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2013-10-29 20:22:09,572 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2013-10-29 20:22:09,579 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2013-10-29 20:22:09,589 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member
2013-10-29 20:22:09,598 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_address
2013-10-29 20:22:09,607 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_login
2013-10-29 20:22:09,614 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_security
2013-10-29 20:22:09,622 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_service
2013-10-29 20:22:09,630 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_status
2013-10-29 20:22:09,642 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table member_withdrawal
2013-10-29 20:22:09,651 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product
2013-10-29 20:22:09,660 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_category
2013-10-29 20:22:09,672 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table product_status
2013-10-29 20:22:09,682 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table purchase
2013-10-29 20:22:09,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table region
2013-10-29 20:22:09,699 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table service_rank
2013-10-29 20:22:09,709 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():576) - drop table withdrawal_reason
2013-10-29 20:22:09,744 [main] INFO  (DfCreateSchemaProcess#createSchema():244) - 
2013-10-29 20:22:09,744 [main] INFO  (DfCreateSchemaProcess#createSchema():245) - * * * * * * * * *
2013-10-29 20:22:09,745 [main] INFO  (DfCreateSchemaProcess#createSchema():246) - *               *
2013-10-29 20:22:09,746 [main] INFO  (DfCreateSchemaProcess#createSchema():247) - * Create Schema *
2013-10-29 20:22:09,746 [main] INFO  (DfCreateSchemaProcess#createSchema():248) - *               *
2013-10-29 20:22:09,747 [main] INFO  (DfCreateSchemaProcess#createSchema():249) - * * * * * * * * *
2013-10-29 20:22:09,751 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-00-system.sql
2013-10-29 20:22:09,756 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database exampledb
2013-10-29 20:22:09,759 [main] INFO  (DfCreateSchemaProcess$1#dispatch():273) - ...Creating a connection to system
2013-10-29 20:22:09,761 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():512) - ...Creating a connection for additional user: root
2013-10-29 20:22:09,772 [main] INFO  (DfCreateSchemaProcess$1#dispatch():299) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2013-10-29 20:22:09,772 [main] INFO  (DfCreateSchemaProcess$1#dispatch():301) -  -> Can't create database 'exampledb'; database exists
2013-10-29 20:22:09,774 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():411) - ...Reviving the user 'system' until the end of this SQL file
2013-10-29 20:22:09,775 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on exampledb.*
  to exampuser@localhost identified by 'exampword'
2013-10-29 20:22:09,779 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2013-10-29 20:22:09,784 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2013-10-29 20:22:09,785 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: replace-schema-10-basic.sql
2013-10-29 20:22:09,786 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():348) - ...Saying good-bye to the user 'system' again
2013-10-29 20:22:09,786 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():352) - ...Clearing revived users
2013-10-29 20:22:09,787 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():359) - ...Coming back to the main user from the user 'system'
2013-10-29 20:22:09,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2013-10-29 20:22:09,834 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2013-10-29 20:22:09,862 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2013-10-29 20:22:09,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2013-10-29 20:22:09,922 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2013-10-29 20:22:09,950 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2013-10-29 20:22:09,971 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2013-10-29 20:22:09,996 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(200) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2013-10-29 20:22:10,025 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2013-10-29 20:22:10,061 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2013-10-29 20:22:10,089 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2013-10-29 20:22:10,103 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2013-10-29 20:22:10,120 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2013-10-29 20:22:10,144 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
CREATE TABLE MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2013-10-29 20:22:10,179 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER ADD CONSTRAINT FK_MEMBER_MEMBER_STATUS 
    FOREIGN KEY (MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-10-29 20:22:10,221 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,252 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_ADDRESS ADD CONSTRAINT FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES REGION (REGION_ID)
2013-10-29 20:22:10,309 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
    FOREIGN KEY (LOGIN_MEMBER_STATUS_CODE) REFERENCES MEMBER_STATUS (MEMBER_STATUS_CODE)
2013-10-29 20:22:10,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_LOGIN ADD CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,426 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SERVICE ADD CONSTRAINT FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) REFERENCES SERVICE_RANK (SERVICE_RANK_CODE)
2013-10-29 20:22:10,476 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_SECURITY ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,525 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,553 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE MEMBER_WITHDRAWAL ADD CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    FOREIGN KEY (WITHDRAWAL_REASON_CODE) REFERENCES WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2013-10-29 20:22:10,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_MEMBER 
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
2013-10-29 20:22:10,657 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PURCHASE ADD CONSTRAINT FK_PURCHASE_PRODUCT 
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
2013-10-29 20:22:10,700 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-10-29 20:22:10,757 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT ADD CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
    FOREIGN KEY (PRODUCT_STATUS_CODE) REFERENCES PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2013-10-29 20:22:10,827 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2013-10-29 20:22:10,860 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_MEMBER_NAME ON MEMBER(MEMBER_NAME)
2013-10-29 20:22:10,874 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_FORMALIZED_DATETIME ON MEMBER(FORMALIZED_DATETIME)
2013-10-29 20:22:10,894 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_LOGIN_DATETIME ON MEMBER_LOGIN(LOGIN_DATETIME)
2013-10-29 20:22:10,946 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_MEMBER_SERVICE_POINT_COUNT ON MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2013-10-29 20:22:10,971 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRODUCT_DATETIME ON PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2013-10-29 20:22:11,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_DATETIME_MEMBER ON PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2013-10-29 20:22:11,037 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PURCHASE_PRICE ON PURCHASE(PURCHASE_PRICE)
2013-10-29 20:22:11,063 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - CREATE INDEX IX_PRODUCT_PRODUCT_NAME ON PRODUCT(PRODUCT_NAME)
2013-10-29 20:22:11,097 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=37 failure=0
2013-10-29 20:22:11,098 [main] INFO  (DfSqlFileFireMan#fire():90) - {Create Schema}: success=39 failure=0 (in 2 files)
2013-10-29 20:22:11,098 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():542) - ...Closing connections to change-users: [system]
2013-10-29 20:22:11,130 [main] INFO  (DfLoadDataProcess#execute():129) - 
2013-10-29 20:22:11,131 [main] INFO  (DfLoadDataProcess#execute():130) - * * * * * * * * * * *
2013-10-29 20:22:11,131 [main] INFO  (DfLoadDataProcess#execute():131) - *                   *
2013-10-29 20:22:11,132 [main] INFO  (DfLoadDataProcess#execute():132) - * Load Data         *
2013-10-29 20:22:11,133 [main] INFO  (DfLoadDataProcess#execute():133) - *                   *
2013-10-29 20:22:11,133 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2013-10-29 20:22:11,155 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-10-29 20:22:11,155 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\common\xls\10-master.xls)
2013-10-29 20:22:11,156 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-10-29 20:22:11,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2013-10-29 20:22:11,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2013-10-29 20:22:11,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2013-10-29 20:22:11,501 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to MEMBER_STATUS
2013-10-29 20:22:11,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{1, アメリカ}
2013-10-29 20:22:11,506 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{2, カナダ}
2013-10-29 20:22:11,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{3, 中国}
2013-10-29 20:22:11,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - REGION:{4, 千葉}
2013-10-29 20:22:11,510 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to REGION
2013-10-29 20:22:11,512 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2013-10-29 20:22:11,513 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2013-10-29 20:22:11,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2013-10-29 20:22:11,514 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2013-10-29 20:22:11,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2013-10-29 20:22:11,517 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to SERVICE_RANK
2013-10-29 20:22:11,524 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2013-10-29 20:22:11,526 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2013-10-29 20:22:11,527 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2013-10-29 20:22:11,528 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2013-10-29 20:22:11,530 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2013-10-29 20:22:11,532 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2013-10-29 20:22:11,533 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{FOD, 食品, null}
2013-10-29 20:22:11,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2013-10-29 20:22:11,534 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2013-10-29 20:22:11,535 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2013-10-29 20:22:11,537 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2013-10-29 20:22:11,538 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{ONS, 生産販売可能}
2013-10-29 20:22:11,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{PST, 生産中止}
2013-10-29 20:22:11,539 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT_STATUS:{SST, 販売中止}
2013-10-29 20:22:11,541 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 3 rows are loaded to PRODUCT_STATUS
2013-10-29 20:22:11,545 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-10-29 20:22:11,545 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\ut\xls\20-member.xls)
2013-10-29 20:22:11,546 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-10-29 20:22:11,625 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2013-10-29 20:22:11.625, foo, 2013-10-29 20:22:11.625, foo, 0}
2013-10-29 20:22:11,632 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2013-10-29 20:22:11.632, foo, 2013-10-29 20:22:11.632, foo, 0}
2013-10-29 20:22:11,634 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2013-10-29 20:22:11.634, foo, 2013-10-29 20:22:11.634, foo, 0}
2013-10-29 20:22:11,635 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2013-10-29 20:22:11.635, foo, 2013-10-29 20:22:11.635, foo, 0}
2013-10-29 20:22:11,636 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2013-10-29 20:22:11.636, foo, 2013-10-29 20:22:11.636, foo, 0}
2013-10-29 20:22:11,637 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2013-10-29 20:22:11.637, foo, 2013-10-29 20:22:11.637, foo, 0}
2013-10-29 20:22:11,639 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{7, Og2000, Og2000, FML, 2005/06/07 17:07:30, null, 2013-10-29 20:22:11.639, foo, 2013-10-29 20:22:11.639, foo, 0}
2013-10-29 20:22:11,641 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2013-10-29 20:22:11.64, foo, 2013-10-29 20:22:11.64, foo, 0}
2013-10-29 20:22:11,642 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2013-10-29 20:22:11.642, foo, 2013-10-29 20:22:11.642, foo, 0}
2013-10-29 20:22:11,643 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2013-10-29 20:22:11.643, foo, 2013-10-29 20:22:11.643, foo, 0}
2013-10-29 20:22:11,645 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2013-10-29 20:22:11.645, foo, 2013-10-29 20:22:11.645, foo, 0}
2013-10-29 20:22:11,647 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2013-10-29 20:22:11.647, foo, 2013-10-29 20:22:11.647, foo, 0}
2013-10-29 20:22:11,649 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2013-10-29 20:22:11.649, foo, 2013-10-29 20:22:11.649, foo, 0}
2013-10-29 20:22:11,651 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2013-10-29 20:22:11.651, foo, 2013-10-29 20:22:11.651, foo, 0}
2013-10-29 20:22:11,653 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2013-10-29 20:22:11.653, foo, 2013-10-29 20:22:11.653, foo, 0}
2013-10-29 20:22:11,656 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2013-10-29 20:22:11.656, foo, 2013-10-29 20:22:11.656, foo, 0}
2013-10-29 20:22:11,658 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2013-10-29 20:22:11.658, foo, 2013-10-29 20:22:11.658, foo, 0}
2013-10-29 20:22:11,659 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2013-10-29 20:22:11.659, foo, 2013-10-29 20:22:11.659, foo, 0}
2013-10-29 20:22:11,661 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2013-10-29 20:22:11.661, foo, 2013-10-29 20:22:11.661, foo, 0}
2013-10-29 20:22:11,663 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2013-10-29 20:22:11.663, foo, 2013-10-29 20:22:11.663, foo, 0}
2013-10-29 20:22:11,672 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER
2013-10-29 20:22:11,674 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2013-10-29 20:22:11.674, foo, 2013-10-29 20:22:11.674, foo, 0}
2013-10-29 20:22:11,677 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2013-10-29 20:22:11.677, foo, 2013-10-29 20:22:11.677, foo, 0}
2013-10-29 20:22:11,679 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2013-10-29 20:22:11.679, foo, 2013-10-29 20:22:11.679, foo, 0}
2013-10-29 20:22:11,682 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2013-10-29 20:22:11.681, foo, 2013-10-29 20:22:11.681, foo, 0}
2013-10-29 20:22:11,684 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2013-10-29 20:22:11.683, foo, 2013-10-29 20:22:11.683, foo, 0}
2013-10-29 20:22:11,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2013-10-29 20:22:11.686, foo, 2013-10-29 20:22:11.686, foo, 0}
2013-10-29 20:22:11,688 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2013-10-29 20:22:11.688, foo, 2013-10-29 20:22:11.688, foo, 0}
2013-10-29 20:22:11,690 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2013-10-29 20:22:11.689, foo, 2013-10-29 20:22:11.689, foo, 0}
2013-10-29 20:22:11,692 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2013-10-29 20:22:11.692, foo, 2013-10-29 20:22:11.692, foo, 0}
2013-10-29 20:22:11,694 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2013-10-29 20:22:11.694, foo, 2013-10-29 20:22:11.694, foo, 0}
2013-10-29 20:22:11,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2013-10-29 20:22:11.696, foo, 2013-10-29 20:22:11.696, foo, 0}
2013-10-29 20:22:11,698 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2013-10-29 20:22:11.698, foo, 2013-10-29 20:22:11.698, foo, 0}
2013-10-29 20:22:11,699 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2013-10-29 20:22:11.699, foo, 2013-10-29 20:22:11.699, foo, 0}
2013-10-29 20:22:11,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2013-10-29 20:22:11.701, foo, 2013-10-29 20:22:11.701, foo, 0}
2013-10-29 20:22:11,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2013-10-29 20:22:11.703, foo, 2013-10-29 20:22:11.703, foo, 0}
2013-10-29 20:22:11,705 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2013-10-29 20:22:11.705, foo, 2013-10-29 20:22:11.705, foo, 0}
2013-10-29 20:22:11,707 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2013-10-29 20:22:11.707, foo, 2013-10-29 20:22:11.707, foo, 0}
2013-10-29 20:22:11,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2013-10-29 20:22:11.709, foo, 2013-10-29 20:22:11.709, foo, 0}
2013-10-29 20:22:11,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2013-10-29 20:22:11.711, foo, 2013-10-29 20:22:11.711, foo, 0}
2013-10-29 20:22:11,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2013-10-29 20:22:11.713, foo, 2013-10-29 20:22:11.713, foo, 0}
2013-10-29 20:22:11,719 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_ADDRESS
2013-10-29 20:22:11,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2013-10-29 20:22:11,721 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2013-10-29 20:22:11,723 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2013-10-29 20:22:11,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2013-10-29 20:22:11,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2013-10-29 20:22:11,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2013-10-29 20:22:11,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2013-10-29 20:22:11,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2013-10-29 20:22:11,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2013-10-29 20:22:11,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2013-10-29 20:22:11,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2013-10-29 20:22:11,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2013-10-29 20:22:11,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2013-10-29 20:22:11,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2013-10-29 20:22:11,735 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2013-10-29 20:22:11,736 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2013-10-29 20:22:11,737 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2013-10-29 20:22:11,738 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2013-10-29 20:22:11,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2013-10-29 20:22:11,740 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2013-10-29 20:22:11,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2013-10-29 20:22:11,741 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2013-10-29 20:22:11,742 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2013-10-29 20:22:11,743 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2013-10-29 20:22:11,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2013-10-29 20:22:11,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2013-10-29 20:22:11,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2013-10-29 20:22:11,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2013-10-29 20:22:11,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2013-10-29 20:22:11,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2013-10-29 20:22:11,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2013-10-29 20:22:11,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2013-10-29 20:22:11,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2013-10-29 20:22:11,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2013-10-29 20:22:11,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2013-10-29 20:22:11,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2013-10-29 20:22:11,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2013-10-29 20:22:11,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2013-10-29 20:22:11,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2013-10-29 20:22:11,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2013-10-29 20:22:11,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2013-10-29 20:22:11,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2013-10-29 20:22:11,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2013-10-29 20:22:11,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2013-10-29 20:22:11,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2013-10-29 20:22:11,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2013-10-29 20:22:11,761 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2013-10-29 20:22:11,762 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2013-10-29 20:22:11,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2013-10-29 20:22:11,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2013-10-29 20:22:11,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2013-10-29 20:22:11,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2013-10-29 20:22:11,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2013-10-29 20:22:11,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2013-10-29 20:22:11,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2013-10-29 20:22:11,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2013-10-29 20:22:11,778 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 56 rows are loaded to MEMBER_LOGIN
2013-10-29 20:22:11,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2013-10-29 20:22:11.779, foo, 2013-10-29 20:22:11.779, foo, 0}
2013-10-29 20:22:11,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2013-10-29 20:22:11.781, foo, 2013-10-29 20:22:11.781, foo, 0}
2013-10-29 20:22:11,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2013-10-29 20:22:11.782, foo, 2013-10-29 20:22:11.782, foo, 0}
2013-10-29 20:22:11,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2013-10-29 20:22:11.782, foo, 2013-10-29 20:22:11.782, foo, 0}
2013-10-29 20:22:11,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2013-10-29 20:22:11.783, foo, 2013-10-29 20:22:11.783, foo, 0}
2013-10-29 20:22:11,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2013-10-29 20:22:11.784, foo, 2013-10-29 20:22:11.784, foo, 0}
2013-10-29 20:22:11,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2013-10-29 20:22:11.785, foo, 2013-10-29 20:22:11.785, foo, 0}
2013-10-29 20:22:11,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2013-10-29 20:22:11.786, foo, 2013-10-29 20:22:11.786, foo, 0}
2013-10-29 20:22:11,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2013-10-29 20:22:11.786, foo, 2013-10-29 20:22:11.786, foo, 0}
2013-10-29 20:22:11,787 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2013-10-29 20:22:11.787, foo, 2013-10-29 20:22:11.787, foo, 0}
2013-10-29 20:22:11,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2013-10-29 20:22:11.788, foo, 2013-10-29 20:22:11.788, foo, 0}
2013-10-29 20:22:11,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2013-10-29 20:22:11.789, foo, 2013-10-29 20:22:11.789, foo, 0}
2013-10-29 20:22:11,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2013-10-29 20:22:11.79, foo, 2013-10-29 20:22:11.79, foo, 0}
2013-10-29 20:22:11,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2013-10-29 20:22:11.791, foo, 2013-10-29 20:22:11.791, foo, 0}
2013-10-29 20:22:11,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2013-10-29 20:22:11.792, foo, 2013-10-29 20:22:11.792, foo, 0}
2013-10-29 20:22:11,793 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2013-10-29 20:22:11.793, foo, 2013-10-29 20:22:11.793, foo, 0}
2013-10-29 20:22:11,794 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2013-10-29 20:22:11.794, foo, 2013-10-29 20:22:11.794, foo, 0}
2013-10-29 20:22:11,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2013-10-29 20:22:11.795, foo, 2013-10-29 20:22:11.795, foo, 0}
2013-10-29 20:22:11,795 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2013-10-29 20:22:11.795, foo, 2013-10-29 20:22:11.795, foo, 0}
2013-10-29 20:22:11,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2013-10-29 20:22:11.796, foo, 2013-10-29 20:22:11.796, foo, 0}
2013-10-29 20:22:11,807 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_SECURITY
2013-10-29 20:22:11,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{1, 1234, PLT, 2013-10-29 20:22:11.808, foo, 2013-10-29 20:22:11.808, foo, 0}
2013-10-29 20:22:11,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{2, 2345, GLD, 2013-10-29 20:22:11.809, foo, 2013-10-29 20:22:11.809, foo, 0}
2013-10-29 20:22:11,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{3, 3456, GLD, 2013-10-29 20:22:11.81, foo, 2013-10-29 20:22:11.81, foo, 0}
2013-10-29 20:22:11,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{4, 875, BRZ, 2013-10-29 20:22:11.811, foo, 2013-10-29 20:22:11.811, foo, 0}
2013-10-29 20:22:11,811 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{5, 1111, BRZ, 2013-10-29 20:22:11.811, foo, 2013-10-29 20:22:11.811, foo, 0}
2013-10-29 20:22:11,812 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{6, 5422, SIL, 2013-10-29 20:22:11.812, foo, 2013-10-29 20:22:11.812, foo, 0}
2013-10-29 20:22:11,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{7, 24678, SIL, 2013-10-29 20:22:11.813, foo, 2013-10-29 20:22:11.813, foo, 0}
2013-10-29 20:22:11,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{8, 234, SIL, 2013-10-29 20:22:11.814, foo, 2013-10-29 20:22:11.814, foo, 0}
2013-10-29 20:22:11,815 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{9, 3, SIL, 2013-10-29 20:22:11.815, foo, 2013-10-29 20:22:11.815, foo, 0}
2013-10-29 20:22:11,816 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{10, 98765, PLT, 2013-10-29 20:22:11.816, foo, 2013-10-29 20:22:11.816, foo, 0}
2013-10-29 20:22:11,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{11, 34, GLD, 2013-10-29 20:22:11.817, foo, 2013-10-29 20:22:11.817, foo, 0}
2013-10-29 20:22:11,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{12, 532, PLT, 2013-10-29 20:22:11.818, foo, 2013-10-29 20:22:11.818, foo, 0}
2013-10-29 20:22:11,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{13, 23678, GLD, 2013-10-29 20:22:11.819, foo, 2013-10-29 20:22:11.819, foo, 0}
2013-10-29 20:22:11,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{14, 432, GLD, 2013-10-29 20:22:11.82, foo, 2013-10-29 20:22:11.82, foo, 0}
2013-10-29 20:22:11,821 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{15, 543, BRZ, 2013-10-29 20:22:11.821, foo, 2013-10-29 20:22:11.821, foo, 0}
2013-10-29 20:22:11,822 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{16, 23545, PLT, 2013-10-29 20:22:11.822, foo, 2013-10-29 20:22:11.822, foo, 0}
2013-10-29 20:22:11,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{17, 2345, GLD, 2013-10-29 20:22:11.823, foo, 2013-10-29 20:22:11.823, foo, 0}
2013-10-29 20:22:11,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{18, 8763, SIL, 2013-10-29 20:22:11.824, foo, 2013-10-29 20:22:11.824, foo, 0}
2013-10-29 20:22:11,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{19, 34567, SIL, 2013-10-29 20:22:11.825, foo, 2013-10-29 20:22:11.825, foo, 0}
2013-10-29 20:22:11,825 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_SERVICE:{20, 43, GLD, 2013-10-29 20:22:11.825, foo, 2013-10-29 20:22:11.825, foo, 0}
2013-10-29 20:22:11,833 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to MEMBER_SERVICE
2013-10-29 20:22:11,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2013-10-29 20:22:11.834, foo, 2013-10-29 20:22:11.834, foo}
2013-10-29 20:22:11,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2013-10-29 20:22:11.837, foo, 2013-10-29 20:22:11.837, foo}
2013-10-29 20:22:11,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2013-10-29 20:22:11.838, foo, 2013-10-29 20:22:11.838, foo}
2013-10-29 20:22:11,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2013-10-29 20:22:11.839, foo, 2013-10-29 20:22:11.839, foo}
2013-10-29 20:22:11,842 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2013-10-29 20:22:11,842 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():126) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2013-10-29 20:22:11,843 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():127) - writeData(playsql\data\ut\xls\30-product.xls)
2013-10-29 20:22:11,843 [main] INFO  (DfXlsDataHandlerImpl#writeSeveralData():128) - = = = = = = =/
2013-10-29 20:22:11,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2013-10-29 20:22:11.883, foo, 2013-10-29 20:22:11.883, foo, 0}
2013-10-29 20:22:11,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2013-10-29 20:22:11.884, foo, 2013-10-29 20:22:11.884, foo, 0}
2013-10-29 20:22:11,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2013-10-29 20:22:11.885, foo, 2013-10-29 20:22:11.885, foo, 0}
2013-10-29 20:22:11,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2013-10-29 20:22:11.886, foo, 2013-10-29 20:22:11.886, foo, 0}
2013-10-29 20:22:11,887 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2013-10-29 20:22:11.887, foo, 2013-10-29 20:22:11.887, foo, 0}
2013-10-29 20:22:11,888 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2013-10-29 20:22:11.888, foo, 2013-10-29 20:22:11.888, foo, 0}
2013-10-29 20:22:11,889 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2013-10-29 20:22:11.889, foo, 2013-10-29 20:22:11.889, foo, 0}
2013-10-29 20:22:11,890 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2013-10-29 20:22:11.89, foo, 2013-10-29 20:22:11.89, foo, 0}
2013-10-29 20:22:11,891 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2013-10-29 20:22:11.891, foo, 2013-10-29 20:22:11.891, foo, 0}
2013-10-29 20:22:11,892 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2013-10-29 20:22:11.892, foo, 2013-10-29 20:22:11.892, foo, 0}
2013-10-29 20:22:11,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2013-10-29 20:22:11.893, foo, 2013-10-29 20:22:11.893, foo, 0}
2013-10-29 20:22:11,894 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2013-10-29 20:22:11.894, foo, 2013-10-29 20:22:11.894, foo, 0}
2013-10-29 20:22:11,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2013-10-29 20:22:11.895, foo, 2013-10-29 20:22:11.895, foo, 0}
2013-10-29 20:22:11,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2013-10-29 20:22:11.895, foo, 2013-10-29 20:22:11.895, foo, 0}
2013-10-29 20:22:11,896 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2013-10-29 20:22:11.896, foo, 2013-10-29 20:22:11.896, foo, 0}
2013-10-29 20:22:11,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2013-10-29 20:22:11.897, foo, 2013-10-29 20:22:11.897, foo, 0}
2013-10-29 20:22:11,897 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2013-10-29 20:22:11.897, foo, 2013-10-29 20:22:11.897, foo, 0}
2013-10-29 20:22:11,898 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2013-10-29 20:22:11.898, foo, 2013-10-29 20:22:11.898, foo, 0}
2013-10-29 20:22:11,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2013-10-29 20:22:11.899, foo, 2013-10-29 20:22:11.899, foo, 0}
2013-10-29 20:22:11,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2013-10-29 20:22:11.9, foo, 2013-10-29 20:22:11.9, foo, 0}
2013-10-29 20:22:11,910 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 20 rows are loaded to PRODUCT
2013-10-29 20:22:11,911 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2013-10-29 20:22:11.911, foo, 2013-10-29 20:22:11.911, foo, 0}
2013-10-29 20:22:11,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2013-10-29 20:22:11.913, foo, 2013-10-29 20:22:11.913, foo, 0}
2013-10-29 20:22:11,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2013-10-29 20:22:11.914, foo, 2013-10-29 20:22:11.914, foo, 0}
2013-10-29 20:22:11,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2013-10-29 20:22:11.915, foo, 2013-10-29 20:22:11.915, foo, 0}
2013-10-29 20:22:11,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2013-10-29 20:22:11.916, foo, 2013-10-29 20:22:11.916, foo, 0}
2013-10-29 20:22:11,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2013-10-29 20:22:11.917, foo, 2013-10-29 20:22:11.917, foo, 0}
2013-10-29 20:22:11,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2013-10-29 20:22:11.918, foo, 2013-10-29 20:22:11.918, foo, 0}
2013-10-29 20:22:11,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2013-10-29 20:22:11.919, foo, 2013-10-29 20:22:11.919, foo, 0}
2013-10-29 20:22:11,920 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2013-10-29 20:22:11.92, foo, 2013-10-29 20:22:11.92, foo, 0}
2013-10-29 20:22:11,921 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2013-10-29 20:22:11.921, foo, 2013-10-29 20:22:11.921, foo, 0}
2013-10-29 20:22:11,922 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2013-10-29 20:22:11.922, foo, 2013-10-29 20:22:11.922, foo, 0}
2013-10-29 20:22:11,923 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2013-10-29 20:22:11.923, foo, 2013-10-29 20:22:11.923, foo, 0}
2013-10-29 20:22:11,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2013-10-29 20:22:11.924, foo, 2013-10-29 20:22:11.924, foo, 0}
2013-10-29 20:22:11,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2013-10-29 20:22:11.925, foo, 2013-10-29 20:22:11.925, foo, 0}
2013-10-29 20:22:11,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2013-10-29 20:22:11.926, foo, 2013-10-29 20:22:11.926, foo, 0}
2013-10-29 20:22:11,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2013-10-29 20:22:11.927, foo, 2013-10-29 20:22:11.927, foo, 0}
2013-10-29 20:22:11,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2013-10-29 20:22:11.928, foo, 2013-10-29 20:22:11.928, foo, 0}
2013-10-29 20:22:11,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2013-10-29 20:22:11.929, foo, 2013-10-29 20:22:11.929, foo, 0}
2013-10-29 20:22:11,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2013-10-29 20:22:11.93, foo, 2013-10-29 20:22:11.93, foo, 0}
2013-10-29 20:22:11,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2013-10-29 20:22:11.931, foo, 2013-10-29 20:22:11.931, foo, 0}
2013-10-29 20:22:11,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2013-10-29 20:22:11.932, foo, 2013-10-29 20:22:11.932, foo, 0}
2013-10-29 20:22:11,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2013-10-29 20:22:11.933, foo, 2013-10-29 20:22:11.933, foo, 0}
2013-10-29 20:22:11,934 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2013-10-29 20:22:11.934, foo, 2013-10-29 20:22:11.934, foo, 0}
2013-10-29 20:22:11,935 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2013-10-29 20:22:11.935, foo, 2013-10-29 20:22:11.935, foo, 0}
2013-10-29 20:22:11,937 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2013-10-29 20:22:11.937, foo, 2013-10-29 20:22:11.937, foo, 0}
2013-10-29 20:22:11,938 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2013-10-29 20:22:11.938, foo, 2013-10-29 20:22:11.938, foo, 0}
2013-10-29 20:22:11,939 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2013-10-29 20:22:11.939, foo, 2013-10-29 20:22:11.939, foo, 0}
2013-10-29 20:22:11,941 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2013-10-29 20:22:11.941, foo, 2013-10-29 20:22:11.941, foo, 0}
2013-10-29 20:22:11,942 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2013-10-29 20:22:11.942, foo, 2013-10-29 20:22:11.942, foo, 0}
2013-10-29 20:22:11,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2013-10-29 20:22:11.943, foo, 2013-10-29 20:22:11.943, foo, 0}
2013-10-29 20:22:11,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2013-10-29 20:22:11.944, foo, 2013-10-29 20:22:11.944, foo, 0}
2013-10-29 20:22:11,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2013-10-29 20:22:11.946, foo, 2013-10-29 20:22:11.946, foo, 0}
2013-10-29 20:22:11,947 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2013-10-29 20:22:11.947, foo, 2013-10-29 20:22:11.947, foo, 0}
2013-10-29 20:22:11,948 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2013-10-29 20:22:11.948, foo, 2013-10-29 20:22:11.948, foo, 0}
2013-10-29 20:22:11,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2013-10-29 20:22:11.95, foo, 2013-10-29 20:22:11.95, foo, 0}
2013-10-29 20:22:11,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2013-10-29 20:22:11.951, foo, 2013-10-29 20:22:11.951, foo, 0}
2013-10-29 20:22:11,952 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2013-10-29 20:22:11.952, foo, 2013-10-29 20:22:11.952, foo, 0}
2013-10-29 20:22:11,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2013-10-29 20:22:11.953, foo, 2013-10-29 20:22:11.953, foo, 0}
2013-10-29 20:22:11,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2013-10-29 20:22:11.954, foo, 2013-10-29 20:22:11.954, foo, 0}
2013-10-29 20:22:11,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2013-10-29 20:22:11.955, foo, 2013-10-29 20:22:11.955, foo, 0}
2013-10-29 20:22:11,957 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2013-10-29 20:22:11.957, foo, 2013-10-29 20:22:11.957, foo, 0}
2013-10-29 20:22:11,958 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2013-10-29 20:22:11.958, foo, 2013-10-29 20:22:11.958, foo, 0}
2013-10-29 20:22:11,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2013-10-29 20:22:11.959, foo, 2013-10-29 20:22:11.959, foo, 0}
2013-10-29 20:22:11,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2013-10-29 20:22:11.96, foo, 2013-10-29 20:22:11.96, foo, 0}
2013-10-29 20:22:11,961 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2013-10-29 20:22:11.961, foo, 2013-10-29 20:22:11.961, foo, 0}
2013-10-29 20:22:11,962 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2013-10-29 20:22:11.962, foo, 2013-10-29 20:22:11.962, foo, 0}
2013-10-29 20:22:11,963 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2013-10-29 20:22:11.963, foo, 2013-10-29 20:22:11.963, foo, 0}
2013-10-29 20:22:11,964 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2013-10-29 20:22:11.964, foo, 2013-10-29 20:22:11.964, foo, 0}
2013-10-29 20:22:11,965 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2013-10-29 20:22:11.965, foo, 2013-10-29 20:22:11.965, foo, 0}
2013-10-29 20:22:11,966 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2013-10-29 20:22:11.966, foo, 2013-10-29 20:22:11.966, foo, 0}
2013-10-29 20:22:11,967 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2013-10-29 20:22:11.967, foo, 2013-10-29 20:22:11.967, foo, 0}
2013-10-29 20:22:11,968 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2013-10-29 20:22:11.968, foo, 2013-10-29 20:22:11.968, foo, 0}
2013-10-29 20:22:11,969 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2013-10-29 20:22:11.969, foo, 2013-10-29 20:22:11.969, foo, 0}
2013-10-29 20:22:11,970 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2013-10-29 20:22:11.97, foo, 2013-10-29 20:22:11.97, foo, 0}
2013-10-29 20:22:11,971 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2013-10-29 20:22:11.971, foo, 2013-10-29 20:22:11.971, foo, 0}
2013-10-29 20:22:11,972 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2013-10-29 20:22:11.972, foo, 2013-10-29 20:22:11.972, foo, 0}
2013-10-29 20:22:11,973 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2013-10-29 20:22:11.973, foo, 2013-10-29 20:22:11.973, foo, 0}
2013-10-29 20:22:11,974 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2013-10-29 20:22:11.974, foo, 2013-10-29 20:22:11.974, foo, 0}
2013-10-29 20:22:11,975 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2013-10-29 20:22:11.975, foo, 2013-10-29 20:22:11.975, foo, 0}
2013-10-29 20:22:11,976 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():986) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2013-10-29 20:22:11.976, foo, 2013-10-29 20:22:11.976, foo, 0}
2013-10-29 20:22:11,987 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1002) -  -> 60 rows are loaded to PURCHASE
2013-10-29 20:22:11,988 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():379) - ...Checking implicit set of classification
2013-10-29 20:22:12,001 [main] INFO  (DfTakeFinallyProcess#takeFinally():219) - 
2013-10-29 20:22:12,002 [main] INFO  (DfTakeFinallyProcess#takeFinally():220) - * * * * * * * **
2013-10-29 20:22:12,003 [main] INFO  (DfTakeFinallyProcess#takeFinally():221) - *              *
2013-10-29 20:22:12,003 [main] INFO  (DfTakeFinallyProcess#takeFinally():222) - * Take Finally *
2013-10-29 20:22:12,004 [main] INFO  (DfTakeFinallyProcess#takeFinally():223) - *              *
2013-10-29 20:22:12,004 [main] INFO  (DfTakeFinallyProcess#takeFinally():224) - * * * * * * * **
2013-10-29 20:22:12,013 [main] INFO  (DfSqlFileFireMan#fire():65) - ...Firing: take-finally.sql
2013-10-29 20:22:12,015 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2013-10-29 20:22:12,015 [main] INFO  (DfSqlFileFireMan#fire():90) - {Take Finally}: success=0 failure=0 (in 1 files)
2013-10-29 20:22:12,017 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-10-29 20:22:12,021 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s971ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {user=root, password=}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Create Schema}: success=39 failure=0 (in 2 files)
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 {Load Data}: loaded-files=3
  (common)
  o 10-master.xls
  (ut)
  o 20-member.xls
  o 30-product.xls

 {Take Finally}: success=0 failure=0 (in 1 files)
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2013-10-29 20:22:12,793 [main] INFO  (TorqueJDBCTransformTask#begin():100) - +------------------------------------------+
2013-10-29 20:22:12,796 [main] INFO  (TorqueJDBCTransformTask#begin():101) - |                                          |
2013-10-29 20:22:12,796 [main] INFO  (TorqueJDBCTransformTask#begin():102) - |                   JDBC                   |
2013-10-29 20:22:12,797 [main] INFO  (TorqueJDBCTransformTask#begin():103) - |                                          |
2013-10-29 20:22:12,800 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2013-10-29 20:22:12,837 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:12,838 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:12,838 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:12,839 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:12,879 [main] INFO  (DfSchemaXmlSerializer#serialize():280) - 
2013-10-29 20:22:12,880 [main] INFO  (DfSchemaXmlSerializer#serialize():281) - ...Starting to process JDBC to SchemaXML
2013-10-29 20:22:12,881 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1429) - ...Loading previous schema (schema diff process)
2013-10-29 20:22:12,890 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-10-29 20:22:12,962 [main] INFO  (DfSchemaXmlSerializer#generateXML():355) - ...Getting DB connection
2013-10-29 20:22:12,974 [main] INFO  (DfDataSourceHandler#createConnection():168) - ...Connecting to database by data source:
2013-10-29 20:22:13,135 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():235) -   product = MySQL 5.6.13
2013-10-29 20:22:13,136 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():236) -   driver  = MySQL-AB JDBC Driver mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} ) for JDBC 3.0
2013-10-29 20:22:13,138 [main] INFO  (DfSchemaXmlSerializer#generateXML():358) - ...Getting DB meta data
2013-10-29 20:22:13,140 [main] INFO  (DfTableExtractor#doGetTableList():67) - ...Getting tables:
2013-10-29 20:22:13,141 [main] INFO  (DfTableExtractor#doGetTableList():68) -   schema = {exampledb.$$NoNameSchema$$ as main}
2013-10-29 20:22:13,141 [main] INFO  (DfTableExtractor#doGetTableList():69) -   types  = [TABLE, VIEW]
2013-10-29 20:22:13,152 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'exampledb' order by table_name asc
2013-10-29 20:22:13,155 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'exampledb' order by table_name asc, column_name asc
2013-10-29 20:22:13,167 [main] INFO  (DfSchemaXmlSerializer#processTable():415) - 
2013-10-29 20:22:13,168 [main] INFO  (DfSchemaXmlSerializer#processTable():416) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2013-10-29 20:22:13,168 [main] INFO  (DfSchemaXmlSerializer#processTable():417) - $ [Table List]
2013-10-29 20:22:13,169 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2013-10-29 20:22:13,203 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2013-10-29 20:22:13,218 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2013-10-29 20:22:13,230 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2013-10-29 20:22:13,243 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2013-10-29 20:22:13,255 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_status(TABLE) // 会員ステータス
2013-10-29 20:22:13,266 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2013-10-29 20:22:13,278 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.product(TABLE) // 商品
2013-10-29 20:22:13,291 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2013-10-29 20:22:13,302 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.product_status(TABLE) // 商品ステータス
2013-10-29 20:22:13,311 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2013-10-29 20:22:13,326 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2013-10-29 20:22:13,335 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2013-10-29 20:22:13,349 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():486) - $ exampledb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2013-10-29 20:22:13,359 [main] INFO  (DfSchemaXmlSerializer#processTable():429) - $ 
2013-10-29 20:22:13,359 [main] INFO  (DfSchemaXmlSerializer#processTable():430) - $ [Table Count]
2013-10-29 20:22:13,360 [main] INFO  (DfSchemaXmlSerializer#processTable():431) - $ 14
2013-10-29 20:22:13,361 [main] INFO  (DfSchemaXmlSerializer#processTable():432) - $ = = = = = = = = = =/
2013-10-29 20:22:13,361 [main] INFO  (DfSchemaXmlSerializer#processTable():433) - 
2013-10-29 20:22:13,364 [main] INFO  (DfSchemaXmlSerializer#processSequence():775) - ...Getting sequences
2013-10-29 20:22:13,368 [main] INFO  (DfSchemaXmlSerializer#serialize():295) - ...Serializing XML:
2013-10-29 20:22:13,368 [main] INFO  (DfSchemaXmlSerializer#serialize():296) -   filePath = ./schema/project-schema-exampledb.xml
2013-10-29 20:22:13,369 [main] INFO  (DfSchemaXmlSerializer#serialize():297) -   encoding = UTF-8
2013-10-29 20:22:13,391 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1447) - ...Loading next schema (schema diff process)
2013-10-29 20:22:13,394 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-10-29 20:22:13,442 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1462) -  -> same as previous (schema diff)
2013-10-29 20:22:13,443 [main] INFO  (DfDataSourceHandler#destroy():121) - ...closeReally()
2013-10-29 20:22:13,449 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s652ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql (MySQL 5.6.13)
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2013-10-29 20:22:14,349 [main] INFO  (TorqueDocumentationTask#begin():173) - +------------------------------------------+
2013-10-29 20:22:14,352 [main] INFO  (TorqueDocumentationTask#begin():174) - |                                          |
2013-10-29 20:22:14,352 [main] INFO  (TorqueDocumentationTask#begin():175) - |                   Doc                    |
2013-10-29 20:22:14,353 [main] INFO  (TorqueDocumentationTask#begin():183) - |                                          |
2013-10-29 20:22:14,354 [main] INFO  (TorqueDocumentationTask#begin():184) - +------------------------------------------+
2013-10-29 20:22:14,397 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:14,397 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:14,398 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:14,399 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:14,402 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():241) - 
2013-10-29 20:22:14,402 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():242) - * * * * * * * * * * *
2013-10-29 20:22:14,403 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():243) - *                   *
2013-10-29 20:22:14,404 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():244) - *    Schema HTML    *
2013-10-29 20:22:14,404 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():245) - *                   *
2013-10-29 20:22:14,405 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():246) - * * * * * * * * * * *
2013-10-29 20:22:14,496 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-10-29 20:22:14,542 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("doc/ControlDocument.vm", c);
2013-10-29 20:22:14,583 [main] INFO  (Database#doEnableDocumentOutputDirectory():1175) - ...Setting up documentOutputDirectory: ./output/doc
2013-10-29 20:22:14,587 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2013-10-29 20:22:14,587 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2013-10-29 20:22:14,590 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2013-10-29 20:22:14,591 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2013-10-29 20:22:14,592 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2013-10-29 20:22:14,594 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2013-10-29 20:22:14,598 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2013-10-29 20:22:14,598 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2013-10-29 20:22:14,601 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2013-10-29 20:22:14,840 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():150) - ...Loading schema history
2013-10-29 20:22:14,841 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():156) -  -> no history
2013-10-29 20:22:14,850 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:22:14,891 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s538ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {Doc}
2013-10-29 20:22:17,072 [main] INFO  (TorqueDataModelTask#begin():104) - +------------------------------------------+
2013-10-29 20:22:17,075 [main] INFO  (TorqueDataModelTask#begin():105) - |                                          |
2013-10-29 20:22:17,076 [main] INFO  (TorqueDataModelTask#begin():106) - |                 Generate                 |
2013-10-29 20:22:17,076 [main] INFO  (TorqueDataModelTask#begin():107) - |                                          |
2013-10-29 20:22:17,077 [main] INFO  (TorqueDataModelTask#begin():108) - +------------------------------------------+
2013-10-29 20:22:17,115 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:17,116 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:17,117 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:17,118 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:17,127 [main] INFO  (TorqueDataModelTask#setupControlTemplate():153) - 
2013-10-29 20:22:17,128 [main] INFO  (TorqueDataModelTask#setupControlTemplate():154) - * * * * * * * * *
2013-10-29 20:22:17,128 [main] INFO  (TorqueDataModelTask#setupControlTemplate():155) - * Process Java  *
2013-10-29 20:22:17,129 [main] INFO  (TorqueDataModelTask#setupControlTemplate():156) - * * * * * * * * *
2013-10-29 20:22:17,130 [main] INFO  (TorqueDataModelTask#setupControlTemplate():158) - ...Using Java control: om/ControlGenerateJava.vm
2013-10-29 20:22:17,217 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-10-29 20:22:17,261 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlGenerateJava.vm", c);
2013-10-29 20:22:17,378 [main] INFO  (Database#doEnableGenerateOutputDirectory():1143) - ...Setting up generateOutputDirectory: ../src/main/java
2013-10-29 20:22:17,381 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2013-10-29 20:22:17,382 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2013-10-29 20:22:17,384 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2013-10-29 20:22:17,385 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2013-10-29 20:22:17,386 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2013-10-29 20:22:17,387 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2013-10-29 20:22:17,391 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():67) - /=======================================
2013-10-29 20:22:17,392 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - ...Initializing additional foreign keys.
2013-10-29 20:22:17,394 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():86) - ==========/
2013-10-29 20:22:17,406 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():57) - /=============================
2013-10-29 20:22:17,407 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - ...Initializing include query.
2013-10-29 20:22:17,407 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - String
2013-10-29 20:22:17,407 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - Number
2013-10-29 20:22:17,408 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():79) - Date
2013-10-29 20:22:17,408 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   NotEqual -> []
2013-10-29 20:22:17,409 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   InScope -> []
2013-10-29 20:22:17,410 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():84) -   NotInScope -> []
2013-10-29 20:22:17,410 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():60) - ========/
2013-10-29 20:22:17,426 [main] INFO  (Database#info():2615) - public void parseAllCommon() {
2013-10-29 20:22:17,429 [main] INFO  (Database#info():2615) -     parse('DBCurrent');
2013-10-29 20:22:17,434 [main] INFO  (Database#info():2615) -     parse('DBFluteConfig');
2013-10-29 20:22:17,449 [main] INFO  (Database#info():2615) -     parse('DBFluteInitializer');
2013-10-29 20:22:17,453 [main] INFO  (Database#info():2615) -     parse('DBMetaInstanceHandler');
2013-10-29 20:22:17,469 [main] INFO  (Database#info():2615) -     parse('EntityDefinedCommonColumn');
2013-10-29 20:22:17,473 [main] INFO  (Database#info():2615) -     parse('ImplementedBehaviorSelector');
2013-10-29 20:22:17,477 [main] INFO  (Database#info():2615) -     parse('ImplementedCommonColumnAutoSetupper');
2013-10-29 20:22:17,482 [main] INFO  (Database#info():2615) -     parse('ImplementedInvokerAssistant');
2013-10-29 20:22:17,486 [main] INFO  (Database#info():2615) -     parse('ImplementedSqlClauseCreator');
2013-10-29 20:22:17,488 [main] INFO  (Database#info():2615) - }
2013-10-29 20:22:17,489 [main] INFO  (Database#info():2615) - public void parseContainerConfig() {
2013-10-29 20:22:17,492 [main] INFO  (Database#info():2615) -     parse('../resources/dbflute.dicon')
2013-10-29 20:22:17,501 [main] INFO  (Database#info():2615) - }
2013-10-29 20:22:17,508 [main] INFO  (DfOldClassHandler#info():878) - public void deleteOldTableClass() {
2013-10-29 20:22:17,535 [main] INFO  (DfOldClassHandler#info():878) - }
2013-10-29 20:22:17,536 [main] INFO  (Database#info():2615) - public void parseTableClass() {
2013-10-29 20:22:17,537 [main] INFO  (Database#info():2615) -     parse('member');
2013-10-29 20:22:17,854 [main] INFO  (Database#info():2615) -     parse('member_address');
2013-10-29 20:22:18,042 [main] INFO  (Database#info():2615) -     parse('member_login');
2013-10-29 20:22:18,165 [main] INFO  (Database#info():2615) -     parse('member_security');
2013-10-29 20:22:18,285 [main] INFO  (Database#info():2615) -     parse('member_service');
2013-10-29 20:22:18,406 [main] INFO  (Database#info():2615) -     parse('member_status');
2013-10-29 20:22:18,522 [main] INFO  (Database#info():2615) -     parse('member_withdrawal');
2013-10-29 20:22:18,641 [main] INFO  (Database#info():2615) -     parse('product');
2013-10-29 20:22:18,760 [main] INFO  (Database#info():2615) -     parse('product_category');
2013-10-29 20:22:18,853 [main] INFO  (Database#info():2615) -     parse('product_status');
2013-10-29 20:22:18,923 [main] INFO  (Database#info():2615) -     parse('purchase');
2013-10-29 20:22:19,031 [main] INFO  (Database#info():2615) -     parse('region');
2013-10-29 20:22:19,119 [main] INFO  (Database#info():2615) -     parse('service_rank');
2013-10-29 20:22:19,189 [main] INFO  (Database#info():2615) -     parse('withdrawal_reason');
2013-10-29 20:22:19,261 [main] INFO  (Database#info():2615) - }
2013-10-29 20:22:19,262 [main] INFO  (Database#info():2615) -  
2013-10-29 20:22:19,309 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:22:19,317 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s240ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {Generate}
2013-10-29 20:22:20,034 [main] INFO  (DfOutsideSqlTestTask#begin():72) - +------------------------------------------+
2013-10-29 20:22:20,036 [main] INFO  (DfOutsideSqlTestTask#begin():73) - |                                          |
2013-10-29 20:22:20,037 [main] INFO  (DfOutsideSqlTestTask#begin():74) - |              OutsideSqlTest              |
2013-10-29 20:22:20,037 [main] INFO  (DfOutsideSqlTestTask#begin():75) - |                                          |
2013-10-29 20:22:20,038 [main] INFO  (DfOutsideSqlTestTask#begin():76) - +------------------------------------------+
2013-10-29 20:22:20,075 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:20,075 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:20,076 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:20,077 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:20,104 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2013-10-29 20:22:20,110 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s070ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2013-10-29 20:22:20,846 [main] INFO  (DfSql2EntityTask#begin():100) - +------------------------------------------+
2013-10-29 20:22:20,849 [main] INFO  (DfSql2EntityTask#begin():101) - |                                          |
2013-10-29 20:22:20,849 [main] INFO  (DfSql2EntityTask#begin():102) - |                Sql2Entity                |
2013-10-29 20:22:20,850 [main] INFO  (DfSql2EntityTask#begin():103) - |                                          |
2013-10-29 20:22:20,851 [main] INFO  (DfSql2EntityTask#begin():104) - +------------------------------------------+
2013-10-29 20:22:20,894 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2013-10-29 20:22:20,895 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2013-10-29 20:22:20,895 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/exampledb
2013-10-29 20:22:20,896 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = exampuser
2013-10-29 20:22:20,904 [main] INFO  (DfSql2EntityTask#setupControlTemplate():172) - 
2013-10-29 20:22:20,905 [main] INFO  (DfSql2EntityTask#setupControlTemplate():173) - * * * * * * * * *
2013-10-29 20:22:20,905 [main] INFO  (DfSql2EntityTask#setupControlTemplate():174) - * Process Java  *
2013-10-29 20:22:20,906 [main] INFO  (DfSql2EntityTask#setupControlTemplate():175) - * * * * * * * * *
2013-10-29 20:22:20,907 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - ...Using Java control: om/ControlSql2EntityJava.vm
2013-10-29 20:22:20,915 [main] INFO  (DTDResolver#resolveEntity():197) - ...Resolving XML by database.dtd in same package
2013-10-29 20:22:20,969 [main] INFO  (DfSqlFileFireMan#fire():90) - {Fired SQL}: success=0 failure=0 (in 0 files)
2013-10-29 20:22:21,053 [main] INFO  (DfSql2EntityTask#initControlContext():329) - 
2013-10-29 20:22:21,054 [main] INFO  (DfSql2EntityTask#initControlContext():330) - ...Preparing generation of customize-entities and parameter-beans
2013-10-29 20:22:21,054 [main] INFO  (DfSql2EntityTask#initControlContext():331) - * * * * * * * * * *
2013-10-29 20:22:21,055 [main] INFO  (DfSql2EntityTask#initControlContext():332) - * CustomizeEntity *
2013-10-29 20:22:21,056 [main] INFO  (DfSql2EntityTask#initControlContext():333) - * * * * * * * * * *
2013-10-29 20:22:21,057 [main] INFO  (DfSql2EntityTask#showParameterBean():899) - * * * * * * * * *
2013-10-29 20:22:21,057 [main] INFO  (DfSql2EntityTask#showParameterBean():900) - * ParameterBean *
2013-10-29 20:22:21,058 [main] INFO  (DfSql2EntityTask#showParameterBean():901) - * * * * * * * * *
2013-10-29 20:22:21,062 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():256) - generator.parse("om/ControlSql2EntityJava.vm", c);
2013-10-29 20:22:21,146 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1159) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2013-10-29 20:22:21,149 [main] INFO  (DfOldClassHandler#info():878) - public void deleteOldCustomizeClass() {
2013-10-29 20:22:21,154 [main] INFO  (DfOldClassHandler#info():878) - }
2013-10-29 20:22:21,154 [main] INFO  (Database#info():2615) - public void parseCustomizeEntity() {
2013-10-29 20:22:21,155 [main] INFO  (Database#info():2615) - }
2013-10-29 20:22:21,169 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():321) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2013-10-29 20:22:21,175 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:22:21,180 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s331ms

  DBFLUTE_CLIENT: {exampledb}
    database  = mysql
    language  = java
    container = seasar
    package   = org.dbflute.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/exampledb
    schema = {exampledb.$$NoNameSchema$$ as main}
    user   = exampuser
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = dbflute-hands-on
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2013-10-29 20:23:29,548 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:23:30,567 [main] INFO  (DfRefreshResourceProcess#refreshResources():68) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to refresh the resources.

[Project List]
[dbflute-hands-on]

[Request URL]
http://localhost:8386/

[IOExpception]
ConnectException
Connection refused: connect
* * * * * * * * * */
2013-10-29 20:23:30,571 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m01s064ms
2013-10-29 20:26:14,137 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:26:15,157 [main] INFO  (DfRefreshResourceProcess#refreshResources():68) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to refresh the resources.

[Project List]
[dbflute-hands-on]

[Request URL]
http://localhost:8386/

[IOExpception]
ConnectException
Connection refused: connect
* * * * * * * * * */
2013-10-29 20:26:15,165 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m01s070ms
2013-10-29 20:27:03,970 [main] INFO  (DfRefreshResourceProcess#refreshResources():63) - ...Refreshing: [dbflute-hands-on]
2013-10-29 20:27:04,017 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():150) - [Final Message]: 00m00s088ms
